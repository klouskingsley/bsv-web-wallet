{"version":3,"sources":["lib/index.ts","state/state.ts","state/action.ts","hooks.js","App.js","reportWebVitals.js","index.js","web3/wallet.ts","web3/wutils.ts","web3/localwallet.ts","web3/web3.ts"],"names":["getSensibleApiPrefix","network","test","NetWork","Mainnet","isSensibleSuccess","res","code","msg","sleep","ms","Promise","resolve","setTimeout","formatValue","value","decimal","isValidAddress","address","bsv","Address","_","generateKeysFromEmailPassword","email","pass","Testnet","s","length","regchars","match","regupchars","regnums","bufferS","Buffer","from","crypto","Hash","sha256","i","tmp","toString","hex","privateKey","PrivateKey","toAddress","publicKey","toPublicKey","getSensibleFtHistoryUrl","genesis","codehash","getWocAddressUrl","url","getWocTransactionUrl","txid","getAddressSensibleFtList","a","apiPrefix","axios","get","data","map","item","tokenName","name","tokenSymbol","symbol","tokenDecimal","balance","pendingBalance","Error","getAddressBsvUtxoList","page","cursor","txId","outputIndex","vout","satoshis","satoshi","getAddressBsvBalance","pendingSatoshi","broadcastSensibleQeury","rawtx","apiPrefx","post","txHex","Transaction","hash","transferSensibleFt","signers","senderWif","receivers","SensibleFT","selectSigners","selectRes","ft","purse","feeb","signerSelecteds","transfer","tx","txParseRes","parseTransaction","serialize","outputs","errMsg","isBsvAmountExceed","indexOf","isFtUtxoAmountExceed","console","log","error","mergeBsvUtxo","merge","ownerWif","Signature","sighashType","SIGHASH_ALL","SIGHASH_FORKID","unlockP2PKHInput","inputIndex","sigtype","sig","prevTxId","inputs","signature","Sighash","sign","output","script","satoshisBN","setScript","Script","buildPublicKeyHashIn","toDER","transferBsv","totalOutput","reduce","prev","cur","amount","utxoValue","selectedUtxoList","feePerKb","dust","utxoResList","push","addInput","Input","PublicKeyHash","Output","buildPublicKeyHashOut","empty","forEach","to","change","getFee","clearOutputs","utxolist","getGenesis","index","txidBuf","reverse","indexBuf","alloc","writeUInt32LE","toHex","concat","hasProtoFlag","scriptBuffer","protoHeader","compare","parseTokenContractScript","scriptBuf","hasSensibleFlag","dataPart","tokenProto","tokenAddress","tokenID","getCodeHash","err","message","input","ftToken","toBuffer","ret","addr","tokenAmount","isFt","ftDetail","decimalNum","defaultSatotx","satotxApiPrefix","satotxPubKey","initialState","account","key","bsvBalance","sensibleFtList","satotxConfigMap","Map","set","createGlobalState","useGlobalState","getGlobalState","setGlobalState","accountStorageKey","saveAccountStorage","str","JSON","stringify","localStorage","setItem","getAccountStorage","getItem","parse","pollingBsvTimer","pollingSensibleFtTimer","pollingBsvBalance","clearInterval","fn","window","setInterval","pollingSensibleFtBalance","saveAccount","password","top","hashdata","decodeURIComponent","location","substr","postMsg","createPostMsg","id","preAccount","preBsvBalance","preSensibleFtBalance","accountKey","emit","type","isBsvBalanceEqual","b1","b2","isSensibleFtBalanceEqual","sort","item1","item2","localeCompare","isAccountEqual","requestLatestData","latestAccount","latestBalance","equal","handleRequest","method","on","eventData","requestId","params","response","signed","useOnceCall","cb","condition","isCalledRef","useRef","useEffect","current","Option","Select","Header","useState","decodeModalVisible","setDecodeModalVisible","setRawtx","setNetwork","resultModalVisible","setResultModalVisible","className","title","content","onClick","actions","open","visible","onCancel","TextArea","rows","onChange","e","target","style","width","placeholder","LoginPanel","Form","useForm","form","bordered","layout","onFinish","Modal","confirm","href","rel","onOk","getFieldsValue","Item","rules","required","prefix","UserOutlined","min","transform","trim","Password","LockOutlined","visibilityToggle","label","htmlType","AccountInfoPanel","onWithDraw","onTransfer","handleTransfer","margin","justify","span","itemLayout","dataSource","renderItem","placement","Meta","description","height","display","alignItems","TransferPanel","initReceivers","onTransferCallback","loading","setLoading","canEdit","isBsv","token","find","setFieldsValue","receiverList","formatBalance","handleSubmit","totalOutputValue","formatReceiverList","broadcastBsv","transferRes","success","broadcastSensibleFt","LeftOutlined","fontWeight","List","fields","add","remove","fieldKey","restField","marginBottom","align","validator","reject","disabled","size","shape","icon","MinusOutlined","PlusOutlined","block","App","trasfering","setTransfering","trasferSensibleFtGenesis","setTrasferSensibleFtGenesis","setInitReceivers","getHashData","opener","handlePopResponseCallback","resObj","requestAccountCondition","transferBsvCondition","outputTotal","obu","onbeforeunload","event","overflow","accountName","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","SignType","wallet","this","signInput","sigHashType","utxo","txHash","toBsvTx","tx_","sequenceNumber","sequence","fromHex","addOutput","nLockTime","toRawTx","LocalWallet","API_PREFIX","privKey","fromWIF","fromRandom","permissions","timeout","confirmed","unconfirmed","signTx","toASM","rawTx","Math","max","time","txhex","minAmount","options","filter","tx_hash","tx_pos","FEE","web3","contractClass","buildContractClass","types","buildTypeClasses","contract","amountInContract","alicePrivateKey","bobPrivateKey","aliceWallet","bobWallet","getRawChangeAddress","aliceChangeAddress","bobChangeAddress","lockingScript","listUnspent","purpose","utxos","changeAmount","signRawTransaction","ALL","unlockscript","sendRawTransaction","buildDeployTx","sendTx"],"mappings":"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","file":"static/js/main.ef1e7256.chunk.js","sourcesContent":["import { bsv, toHex } from 'scryptlib';\nimport { NetWork } from '../web3';\nimport {Key, SensibleFt, SensibleSatotx, TransferReceiver, BsvUtxo} from '../state/stateType'\nimport axios from 'axios'\nimport {SensibleFT} from 'sensible-sdk'\nimport * as tokenProto from 'sensible-sdk/dist/bcp02/tokenProto'\nimport * as protoHeader from 'sensible-sdk/dist/bcp02/protoheader'\nimport { getCodeHash } from 'sensible-sdk/dist/common/utils';\n\nfunction getSensibleApiPrefix(network: NetWork) {\n    const test = network === NetWork.Mainnet ? '' : '/test'\n    return `https://api.sensiblequery.com${test}`\n}\nfunction isSensibleSuccess(res: any) {\n    return res.code === 0 && res.msg === 'ok'\n}\n\nfunction sleep(ms: number) {\n    return new Promise(resolve => setTimeout(resolve, ms))\n}\n\nexport function formatValue(value: number, decimal: number) {\n    // const bigNum = bsv.crypto.BN.fromNumber(value)\n    // return bigNum.div(10**decimal).toString(10)\n    return value / (10**decimal)\n}\n\nexport function isValidAddress(network: NetWork, address: string) {\n    try {\n        new bsv.Address(address, network)\n        return true\n    } catch (_) {\n        return false\n    }\n}\n\nexport function generateKeysFromEmailPassword(email: string, pass: string, network: NetWork = NetWork.Testnet): Key {\n    let s: string = email\n    s += '|'+pass+'|';\n    s += s.length+'|!@'+((pass.length*7)+email.length)*7;\n    var regchars = (pass.match(/[a-z]+/g)) ? pass.match(/[a-z]+/g)!.length : 1;\n    var regupchars = (pass.match(/[A-Z]+/g)) ? pass.match(/[A-Z]+/g)!.length : 1;\n    var regnums = (pass.match(/[0-9]+/g)) ? pass.match(/[0-9]+/g)!.length : 1;\n    s += ((regnums+regchars)+regupchars)*pass.length+'3571';\n    s += (s+''+s);\n\n    let bufferS = Buffer.from(s)\n    bufferS = bsv.crypto.Hash.sha256(bufferS)\n\tfor(let i=0;i<=49;i++){\n        const tmp = Buffer.from(bufferS.toString('hex'))\n        bufferS = bsv.crypto.Hash.sha256(tmp)\n\t}\n    const hex = bsv.crypto.Hash.sha256(Buffer.from(bufferS.toString('hex'))).toString('hex')\n    \n    const privateKey = new bsv.PrivateKey(hex, network)\n    const address = privateKey.toAddress(network).toString()\n    \n    return {\n        address,\n        privateKey: privateKey.toString(),\n        publicKey: privateKey.toPublicKey().toString()\n    }\n}\n\nexport function getSensibleFtHistoryUrl(network: NetWork, address: string, genesis: string, codehash: string) {\n    // https://sensiblequery.com/#/ft/utxo/a1961d0c0ab39f1bd0f79c2f6ae27138cca0620c/d4266deb03b5fdb7c9af39fa71f86f4b1f6390422e9bcd1556399a3f0063965f00000000/1111111111111111111114oLvT2\n    const test = network === NetWork.Mainnet ? '' : '/test'\n    return `https://sensiblequery.com${test}/#/ft/utxo/${codehash}/${genesis}/${address}`\n}\n\n\nexport function getWocAddressUrl(network: NetWork, address: string) {\n    let url = ''\n    if (network === NetWork.Mainnet) {\n        url = 'https://whatsonchain.com/address/'\n    } \n    if (network === NetWork.Testnet) {\n        url = 'https://test.whatsonchain.com/address/'\n    }\n    if (!url) {\n        return url\n    }\n    url += address\n    return url\n}\n\nexport function getWocTransactionUrl(network: NetWork, txid: string) {\n    let url = ''\n    if (network === NetWork.Mainnet) {\n        url = 'https://whatsonchain.com/tx/'\n    } \n    if (network === NetWork.Testnet) {\n        url = 'https://test.whatsonchain.com/tx/'\n    }\n    if (!url) {\n        return url\n    }\n    url += txid\n    return url\n}\n\n// todo 分页获取\nexport async function getAddressSensibleFtList(network: NetWork, address: string): Promise<SensibleFt[]> {\n    // todo remove next line\n    const apiPrefix = getSensibleApiPrefix(network)\n    const {data} = await axios.get(`${apiPrefix}/ft/summary/${address}?cursor=0&size=20`)\n    const success = isSensibleSuccess(data)\n\n    if (success) {\n        return (data.data || []).map((item: any) => {\n            return {\n                genesis: item.genesis,\n                codehash: item.codehash,\n                tokenName: item.name,\n                tokenSymbol: item.symbol,\n                tokenDecimal: item.decimal,\n                balance: item.balance + item.pendingBalance,\n            }\n        })\n    }\n    throw new Error(data.msg)\n}\n\n// 获取 bsv utxo\nexport async function getAddressBsvUtxoList(network: NetWork, address: string, page: number): Promise<BsvUtxo[]> {\n    const pageSize = 16\n    const cursor = (page - 1) * pageSize\n    const apiPrefix = getSensibleApiPrefix(network)\n    const {data} = await axios.get(`${apiPrefix}/address/${address}/utxo?cursor=${cursor}&size=${pageSize}`)\n    const success = isSensibleSuccess(data)\n    if (success) {\n        return (data.data || []).map((item: any) => {\n            return {\n                txId: item.txid, \n                outputIndex: item.vout,\n                satoshis: item.satoshi,\n                address: address,\n            }\n        })\n    }\n    throw new Error(data.msg)\n}\n\n// 获取bsv 余额\nexport async function getAddressBsvBalance(network: NetWork, address: string): Promise<number> {\n    const apiPrefix = getSensibleApiPrefix(network)\n    const {data} = await axios.get(`${apiPrefix}/address/${address}/balance`)\n    const success = isSensibleSuccess(data)\n    if (success) {\n        return data.data.satoshi + data.data.pendingSatoshi\n    }\n    throw new Error(data.msg)\n}\n\n// 获取 sensible ft 余额\nexport async function getAddressSensibleFtBalance(network: NetWork, address: string, codehash: string, genesis: string): Promise<number> {\n    const apiPrefix = getSensibleApiPrefix(network)\n    const {data} = await axios.get(`${apiPrefix}/ft/balance/${codehash}/${genesis}/${address}`)\n    const success = isSensibleSuccess(data)\n    if (success) {\n        return data.data.satoshi\n    }\n    throw new Error(data.msg)\n}\n\n// 获取 sensible 余额 地址\nexport async function getSensibleAddressUrl(network: NetWork, address: string, codehash: string, genesis: string) {\n    const test = network === NetWork.Mainnet ? '' : '/test'\n    // https://sensiblequery.com/#/ft/utxo/ac939f3cf7aba022d09f05e5448f1e635c81dbb3/598d220eaecb68cf783cbc6cc6295d042897874f/1FJCX1QG7KyaHpx1U2iVe4xoAWNVB1Wd3L\n    return `https://sensiblequery.com${test}/#/ft/utxo/${codehash}/${genesis}/${address}`\n}\n\n\n// 广播交易\nexport async function broadcastSensibleQeury(network: NetWork, rawtx: string) {\n    const apiPrefx = getSensibleApiPrefix(network)\n    const {data} = await axios.post(`${apiPrefx}/pushtx`, {\n        txHex: rawtx,\n    })\n    const success = isSensibleSuccess(data)\n    if (success) {\n        return new bsv.Transaction(rawtx).hash\n    }\n    return new Error(data.msg)\n}\n\n\n// 发送 token 交易\nexport async function transferSensibleFt(network: NetWork, signers: SensibleSatotx[], senderWif: string, receivers: TransferReceiver[], codehash: string, genesis: string){\n    const selectRes = await SensibleFT.selectSigners()\n    const ft = new SensibleFT({\n        network: network as any,\n        purse: senderWif,\n        feeb: 0.5,\n        signerSelecteds: selectRes.signerSelecteds,\n        signers: selectRes.signers,\n    })\n\n    try {\n        const {txid, tx} = await ft.transfer({\n            senderWif: senderWif,\n            receivers,\n            codehash,\n            genesis,\n        })\n        const txParseRes = parseTransaction(network, tx.serialize(true))\n        return {\n            txid,\n            outputs: txParseRes.outputs,\n        }\n    } catch (err) {\n        const errMsg = err.toString();\n        const isBsvAmountExceed =\n          errMsg.indexOf(\n            \"The count of utxos should not be more than 3 in transfer\"\n          ) > 0;\n        let isFtUtxoAmountExceed = errMsg.indexOf('Too many token-utxos') > 0;\n        console.log(\"broadcast sensible ft error \");\n        console.error(err);\n\n        if (!isBsvAmountExceed && !isFtUtxoAmountExceed) {\n            throw err;\n        }\n\n        // 如果 bsv utxo 先 merge bsv utxo\n        if (isBsvAmountExceed) {\n            try {\n                await mergeBsvUtxo(network, senderWif)\n                await sleep(3000)\n            } catch (err) {\n                console.log('merge bsv utxo fail')\n                console.error(err)\n                \n            }\n\n            // merge 后重新发起 ft transfer 交易\n            try {\n                const {txid, tx} = await ft.transfer({\n                    senderWif: senderWif,\n                    receivers,\n                    codehash,\n                    genesis,\n                })\n                const txParseRes = parseTransaction(network, tx.serialize(true))\n                return {\n                    txid,\n                    outputs: txParseRes.outputs,\n                }\n            } catch (err) {\n                console.log('ft transfer fail after bsv utxo merge')\n                console.error(err)\n                const errMsg = err.toString()\n                isFtUtxoAmountExceed = errMsg.indexOf('Too many token-utxos') > 0;\n                if (!isFtUtxoAmountExceed) {\n                    throw err\n                }\n            }\n        }\n\n        if (isFtUtxoAmountExceed) {\n            // merge utxo\n            try {\n                await ft.merge({\n                    ownerWif: senderWif,\n                    codehash,\n                    genesis,\n                })\n                await sleep(3000)\n            } catch (err) {\n                console.log('merge ft utxo fail')\n                console.error(err)\n                throw err\n            }\n\n            // merge 后重新发起 ft transfer 交易\n            try {\n                const {txid, tx} = await ft.transfer({\n                    senderWif: senderWif,\n                    receivers,\n                    codehash,\n                    genesis,\n                })\n                const txParseRes = parseTransaction(network, tx.serialize(true))\n                return {\n                    txid,\n                    outputs: txParseRes.outputs,\n                }\n            } catch (err) {\n                console.log('ft transfer fail after ft utxo merge')\n                console.error(err)\n                throw err\n            }\n        }\n\n    } \n}\n\nconst Signature = bsv.crypto.Signature;\nexport const sighashType = Signature.SIGHASH_ALL | Signature.SIGHASH_FORKID;\n\n\n// p2pkh 解锁\nexport function unlockP2PKHInput(privateKey: bsv.PrivateKey, tx: bsv.Transaction, inputIndex: number, sigtype: number) {\n    const sig = new bsv.Transaction.Signature({\n      publicKey: privateKey.publicKey,\n      prevTxId: tx.inputs[inputIndex].prevTxId,\n      outputIndex: tx.inputs[inputIndex].outputIndex,\n      inputIndex,\n      signature: bsv.Transaction.Sighash.sign(\n        tx,\n        privateKey,\n        sigtype,\n        inputIndex,\n        tx.inputs[inputIndex].output.script,\n        tx.inputs[inputIndex].output.satoshisBN\n      ),\n      sigtype,\n    });\n  \n    tx.inputs[inputIndex].setScript(\n      bsv.Script.buildPublicKeyHashIn(\n        sig.publicKey,\n        sig.signature.toDER(),\n        sig.sigtype\n      )\n    );\n  }\n\n// 发送 bsv 交易\nexport async function transferBsv(network: NetWork, senderWif: string, receivers: TransferReceiver[]) {\n    // 1. 获取用户 utxo 列表\n    // 2. 判断 utxo 金额 是否 满足 receivers 金额\n    // 3. 构造交易\n    // 4. 广播交易\n    console.log('arguments', network, senderWif, receivers)\n    const address = new bsv.PrivateKey(senderWif, network).toAddress(network)\n    const balance = await getAddressBsvBalance(network, address)\n    const totalOutput = receivers.reduce((prev, cur) => prev + cur.amount, 0)\n    if (balance < totalOutput) {\n        throw new Error('Insufficient_Balance')\n    }\n    let utxoValue = 0\n    let selectedUtxoList = []\n\n    const tx = new bsv.Transaction()\n    tx.feePerKb(500)\n    const dust = 456\n\n    // input = output + fee + change\n    // 异常情况: 加上 change 后, fee 增加, 原本 input 不够了, 此时将所有输出移除, 然后，暂不考虑\n    \n    for (let page = 1; ;page++) {\n        const utxoResList = await getAddressBsvUtxoList(network, address, page)\n        for (let i = 0; i < utxoResList.length; i++) {\n            const item = utxoResList[i]\n            utxoValue += item.satoshis\n            selectedUtxoList.push(item)\n            tx.addInput(\n                new bsv.Transaction.Input.PublicKeyHash({\n                    output: new bsv.Transaction.Output({\n                        script: bsv.Script.buildPublicKeyHashOut(item.address),\n                        satoshis: item.satoshis,\n                    }),\n                    prevTxId: item.txId,\n                    outputIndex: item.outputIndex,\n                    script: bsv.Script.empty(),\n                })\n            );\n            if (totalOutput <= utxoValue) {\n                break\n            }\n        }\n        if (totalOutput <= utxoValue) {\n            break\n        }\n    }\n    receivers.forEach(item => {\n        tx.to(item.address, item.amount)\n    })\n    if (utxoValue - totalOutput > 0) {\n        tx.change(address)\n    }\n    if (utxoValue + tx.getFee() + dust > totalOutput) {\n        tx.clearOutputs()\n        receivers.forEach(item => {\n            tx.to(item.address, item.amount)\n        })\n    }\n    tx.inputs.forEach((_: any, inputIndex: number) => {\n        const privateKey = new bsv.PrivateKey(senderWif)\n        unlockP2PKHInput(privateKey, tx, inputIndex, sighashType);\n    });\n    const txid = await broadcastSensibleQeury(network, tx.serialize())\n    const txParseRes = parseTransaction(network, tx.serialize(true))\n    return {\n        txid,\n        outputs: txParseRes.outputs,\n    }\n}\n\n// 合并 bsv utxo, 合并一页\nexport async function mergeBsvUtxo(network: NetWork, senderWif: string) {\n    const address = new bsv.PrivateKey(senderWif, network).toAddress(network)\n    const utxolist = await getAddressBsvUtxoList(network, address, 1)\n    const tx = new bsv.Transaction()\n    tx.feePerKb(500)\n    utxolist.forEach(item => {\n        tx.addInput(new bsv.Transaction.Input.PublicKeyHash({\n            output: new bsv.Transaction.Output({\n                script: bsv.Script.buildPublicKeyHashOut(item.address),\n                satoshis: item.satoshis,\n            }),\n            prevTxId: item.txId,\n            outputIndex: item.outputIndex,\n            script: bsv.Script.empty(),\n        }))\n    })\n    tx.change(address)\n    tx.inputs.forEach((_: any, inputIndex: number) => {\n        const privateKey = new bsv.PrivateKey(senderWif)\n        unlockP2PKHInput(privateKey, tx, inputIndex, sighashType)\n    })\n    const txid = await broadcastSensibleQeury(network, tx.serialize())\n    const txParseRes = parseTransaction(network, tx.serialize(true))\n    return {\n        txid,\n        outputs: txParseRes.outputs,\n    }\n}\n\n// 合并 sensible ft\nexport async function mergeSensibleFt(network: NetWork) {}\n\nconst getGenesis = function (txid: string, index: number) {\n    const txidBuf = Buffer.from(txid, \"hex\").reverse();\n    const indexBuf = Buffer.alloc(4, 0);\n    indexBuf.writeUInt32LE(index);\n    return toHex(Buffer.concat([txidBuf, indexBuf]));\n};\n\nconst hasProtoFlag = function (scriptBuffer: any) {\n    const flag = protoHeader.getFlag(scriptBuffer);\n    if (flag.compare(protoHeader.PROTO_FLAG) === 0) {\n      return true;\n    }\n    return false;\n};\n\n\nconst parseTokenContractScript = function (scriptBuf: any, network: any = \"mainnet\") {\n    const hasSensibleFlag = hasProtoFlag(scriptBuf);\n    if (!hasSensibleFlag) {\n      return null;\n    }\n    const dataPart = tokenProto.parseDataPart(scriptBuf);\n    const tokenAddress = new bsv.Address(\n      Buffer.from(dataPart.tokenAddress!, \"hex\"),\n      network\n    ).toString();\n    const genesis = getGenesis(dataPart.tokenID!.txid, dataPart.tokenID!.index);\n    const codehash = getCodeHash(new bsv.Script(scriptBuf));\n    return {\n      ...dataPart,\n      genesis,\n      codehash,\n      tokenAddress,\n    };\n};\n\n\n\nexport function parseTransaction(network: NetWork, rawtx: string) {\n    let tx\n    try {\n        tx = new bsv.Transaction(rawtx)\n    } catch (err) {\n        return {\n            error: err.message\n        }\n    }\n\n    const inputs = tx.inputs.map((input: any, index: number) => {\n        const ftToken: any = parseTokenContractScript(input.script.toBuffer(), network);\n\n        let ret: any = {\n            index: index,\n            prevTxId: input.prevTxId.toString('hex'),\n            outputIndex: input.outputIndex,\n            script: input.script.toString('hex'),\n        }\n        try {\n            const addr = input.script.toAddress(network);\n            if (addr) {\n                ret.address = addr.toString()\n            }\n        } catch (err) {}\n        if (!ftToken) {\n            return ret\n        }\n        if (ftToken.tokenAmount <= 0) {\n            return ret\n        }\n        ret = {\n            ...ret,\n            isFt: true,\n            ftDetail: {\n                genesis: ftToken.genesis,\n                codehash: ftToken.codehash,\n                address: ftToken.tokenAddress,\n                decimal: ftToken.decimalNum,\n                name: ftToken.tokenName,\n                symbol: ftToken.tokenSymbol,\n            }\n        }\n        return ret\n    })\n    const outputs = tx.outputs.map((output: any, index: number) => {\n        const ftToken: any = parseTokenContractScript(output.script.toBuffer(), network);\n        let ret: any = {\n            index: index,\n            satoshis: output.satoshis,\n            script: output.script.toString('hex')\n        }\n        try {\n            const addr = output.script.toAddress(network);\n            if (addr) {\n                ret.address = addr.toString()\n            }\n        } catch (err) {}\n        if (!ftToken) {\n            return ret\n        }\n        if (ftToken.tokenAmount <= 0) {\n            return ret\n        }\n        ret = {\n            ...ret,\n            isFt: true,\n            ftDetail: {\n                genesis: ftToken.genesis,\n                codehash: ftToken.codehash,\n                address: ftToken.tokenAddress,\n                decimal: ftToken.decimalNum,\n                name: ftToken.tokenName,\n                symbol: ftToken.tokenSymbol,\n                amount: ftToken.tokenAmount,\n            }\n        }\n        return ret\n    })\n\n    return {\n        inputs: inputs,\n        outputs: outputs,\n        txid: tx.hash,\n    }\n    \n}","import { createGlobalState } from \"react-hooks-global-state\";\nimport {State, SensibleSatotx} from './stateType'\n\nconst defaultSatotx: SensibleSatotx = {\n    satotxApiPrefix: 'https://api.satotx.com', \n    satotxPubKey: '25108ec89eb96b99314619eb5b124f11f00307a833cda48f5ab1865a04d4cfa567095ea4dd47cdf5c7568cd8efa77805197a67943fe965b0a558216011c374aa06a7527b20b0ce9471e399fa752e8c8b72a12527768a9fc7092f1a7057c1a1514b59df4d154df0d5994ff3b386a04d819474efbd99fb10681db58b1bd857f6d5'\n}\n\n// app state\nconst initialState: State = {\n    account: null,\n    key: null,\n    bsvBalance: null,\n    sensibleFtList: [],\n    satotxConfigMap: new Map()\n};\ninitialState.satotxConfigMap.set(\n    '5b3bfa8e7600d701e70551075573ea28fd16c25a39fe2bdafdc3e08b11ca76b800000000', \n    [defaultSatotx, defaultSatotx, defaultSatotx]\n)\nconst { useGlobalState, getGlobalState, setGlobalState } = createGlobalState(initialState);\n\nexport {\n    useGlobalState,\n    getGlobalState,\n    setGlobalState,\n    defaultSatotx,\n}\n","import {setGlobalState, getGlobalState } from './state'\nimport {generateKeysFromEmailPassword, getAddressSensibleFtList, getAddressBsvBalance} from '../lib'\nimport {Account, BalanceBsv, Key, SensibleFt} from './stateType'\nimport * as createPostMsg from 'post-msg';\n\n// local account storage\nconst accountStorageKey = 'accountStorageKey'\n// localStorage.removeItem(accountStorageKey)\nfunction saveAccountStorage(account: Account | null) {\n    const str = account ? JSON.stringify(account) : ''\n    localStorage.setItem(accountStorageKey, str)\n    // do not save account !!!\n}\nfunction getAccountStorage(): Account | null {\n    const str = localStorage.getItem(accountStorageKey)\n    if (!str) {\n        return null\n    }\n    return JSON.parse(str)\n}\n\n// app action\nlet pollingBsvTimer = 0\nlet pollingSensibleFtTimer = 0\nexport async function pollingBsvBalance(){\n    clearInterval(pollingBsvTimer)\n    const fn = async () => {\n        const account = getGlobalState('account')\n        const key = getGlobalState('key')\n        if (!account || !key) {\n            return\n        }\n        try {\n            const balance = await getAddressBsvBalance(account.network, key.address)\n            setGlobalState('bsvBalance', {balance})\n        } catch (err) {\n            console.log('getAddressBsvBalance err', account.network, key.address, err)\n        }\n    }\n    await fn()\n    pollingBsvTimer = window.setInterval(fn, 5000)\n}\nexport async function pollingSensibleFtBalance() {\n    clearInterval(pollingSensibleFtTimer)\n    const fn = async () => {\n        const account = getGlobalState('account')\n        const key = getGlobalState('key')\n        if (!account || !key) {\n            return\n        }\n        try {\n            const sensibleFtList = await getAddressSensibleFtList(account.network, key.address)\n            setGlobalState('sensibleFtList', sensibleFtList)\n        } catch (err) {\n            console.log('getAddressSensibleFtList err', account.network, key.address, err)\n        }\n    }\n    await fn()\n    pollingSensibleFtTimer = window.setInterval(fn, 5000)\n}\n\nexport async function saveAccount(account: Account | null) {\n    saveAccountStorage(account)\n    if (account) {\n        const key = generateKeysFromEmailPassword(account.email, account.password, account.network)\n        setGlobalState('account', account)\n        setGlobalState('key', key)\n        await pollingSensibleFtBalance()\n        pollingBsvBalance()\n    } else {\n        setGlobalState(\"account\", null)\n        setGlobalState('key', null)\n    }\n}\n\nexport function recoverAccountFromStorage() {\n    const account = getAccountStorage()\n    saveAccount(account)\n}\n\nconst sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms))\n\n// iframe action\nexport async function runIframeTask() {\n    if (window === window.top) {\n        return\n    }\n    const hashdata = JSON.parse(decodeURIComponent(window.location.hash.substr(1)))\n    const postMsg = createPostMsg(window.top, '*')\n    const id = hashdata.id\n\n    let preAccount: Account | null = null\n    let preBsvBalance: BalanceBsv | null = null\n    let preSensibleFtBalance: SensibleFt[] = []\n    let accountKey: Key | null = null\n    // let lastBsvBalance: \n\n    postMsg.emit(id, {\n        type: 'ready'\n    })\n\n    const isBsvBalanceEqual = (b1: BalanceBsv | null, b2: BalanceBsv | null) => {\n        if (!b1 && !b2) {\n            return true\n        }\n        return b1?.balance === b2?.balance\n    }\n    const isSensibleFtBalanceEqual = (b1: SensibleFt[], b2: SensibleFt[]) => {\n        if (b1.length !== b2.length) {\n            return false\n        }\n        b1.sort((item1, item2) => item1.genesis.localeCompare(item2.genesis))\n        b2.sort((item1, item2) => item1.genesis.localeCompare(item2.genesis))\n\n        for (let i = 0; i < b1.length; i++) {\n            const item1 = b1[i]\n            const item2 = b2[i]\n            if (item1.genesis !== item2.genesis) {\n                return false\n            }\n            if (item1.balance !== item2.balance) {\n                return false\n            }\n        }                \n        return true\n    }\n    const isAccountEqual = (b1: Account | null, b2: Account | null) => {\n        return (\n            b1?.email === b2?.email &&\n            b1?.network === b2?.network &&\n            b1?.password === b2?.password\n        )\n    }\n    const requestLatestData = async () => {\n        const latestAccount = getAccountStorage()\n        if (!(isAccountEqual(latestAccount, preAccount))) {\n            postMsg.emit(id, {\n                type: 'account',\n                data: latestAccount\n            })\n        }\n        preAccount = latestAccount;\n        if (preAccount) {\n            // get balance\n            accountKey = generateKeysFromEmailPassword(preAccount.email, preAccount.password, preAccount.network)\n            try {\n                const latestBalance = await getAddressBsvBalance(preAccount.network, accountKey.address)\n                const equal = isBsvBalanceEqual(preBsvBalance, {balance: latestBalance})\n                preBsvBalance = {balance: latestBalance}\n                if (!equal) {\n                    postMsg.emit(id, {\n                        type: 'bsvBalance', \n                        data: preBsvBalance,\n                    })\n                }\n            } catch (err) {}\n            try {\n                const latestBalance = await getAddressSensibleFtList(preAccount.network, accountKey.address)\n                const equal = isSensibleFtBalanceEqual(preSensibleFtBalance, latestBalance)\n                preSensibleFtBalance = latestBalance\n                if (!equal) {\n                    postMsg.emit(id, {\n                        type: 'sensibleFtBalance',\n                        data: preSensibleFtBalance\n                    })\n                }\n            } catch (err) {}\n            return true\n        } else {\n            return false\n        }\n    }\n\n    const handleRequest = (method: string, fn: Function) => {\n        postMsg.on(id, async function (_: any, eventData: any) {\n            const {type, data} = eventData\n            if (type === 'request' && data?.method === method) {\n                const requestId = data.requestId\n                try {\n                    const res = await fn(data.params)\n                    postMsg.emit(id, {\n                        type: 'response',\n                        data: {\n                            requestId,\n                            method,\n                            response: res,\n                        }\n                    })\n                } catch (err) {\n                    postMsg.emit(id, {\n                        type: 'response',\n                        data: {\n                            requestId,\n                            method,\n                            error: err.toString()\n                        }\n                    })\n                }\n            }\n        })\n    }\n\n    handleRequest('getAccount', async () => {\n        await requestLatestData()\n        if (!preAccount) {\n            return null\n        }\n        return {\n            name: preAccount.email,\n            email: preAccount.email,\n            network: preAccount.network,\n        }\n    });\n    handleRequest('getBsvBalance', async () => {\n        await requestLatestData()\n        return preBsvBalance\n    })\n    handleRequest('getSensibleFtBalance', async () => {\n        await requestLatestData()\n        return preSensibleFtBalance\n    })\n    handleRequest('getAddress', async () => {\n        await requestLatestData()\n        if (!accountKey) {\n            return null\n        }\n        return accountKey.address\n    })\n    handleRequest('logout', async () => {\n        saveAccountStorage(null)\n    })\n    handleRequest('ping', () => {\n        return null;\n    })\n\n    for (;;) {\n        const signed = await requestLatestData()\n        await sleep(signed ? 3000 : 500)\n    }\n\n}","import { useRef, useEffect } from \"react\";\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    let id = setInterval(tick, delay);\n    return () => clearInterval(id);\n  }, [delay]);\n}\n\nexport function useOnceCall(cb, condition = true) {\n  const isCalledRef = useRef(false);\n  useEffect(() => {\n    if (condition && !isCalledRef.current) {\n      isCalledRef.current = true;\n      cb();\n    }\n  }, [cb, condition]);\n}\n","import {\n  Button,\n  Popover,\n  Card,\n  Form,\n  Input,\n  Select,\n  List,\n  Row,\n  Col,\n  message,\n  InputNumber,\n  Space,\n  Modal,\n} from \"antd\";\nimport {\n  UserOutlined,\n  LockOutlined,\n  MinusOutlined,\n  PlusOutlined,\n  LeftOutlined,\n} from \"@ant-design/icons\";\nimport { useState, useEffect } from \"react\";\nimport * as QRCode from \"qrcode.react\";\nimport {\n  getWocAddressUrl,\n  formatValue,\n  isValidAddress,\n  transferBsv,\n  transferSensibleFt,\n  getWocTransactionUrl,\n  getSensibleFtHistoryUrl,\n  parseTransaction,\n} from \"./lib\";\nimport * as createPostMsg from \"post-msg\";\nimport { useGlobalState, defaultSatotx } from \"./state/state\";\nimport * as actions from \"./state/action\";\nimport { useOnceCall } from \"./hooks\";\nimport \"./App.css\";\n\nconst { Option } = Select;\n\nfunction Header() {\n  const [account] = useGlobalState(\"account\");\n  const [key] = useGlobalState(\"key\");\n  const [decodeModalVisible, setDecodeModalVisible] = useState(false);\n  const [rawtx, setRawtx] = useState(\"\");\n  const [network, setNetwork] = useState(\"\");\n  const [resultModalVisible, setResultModalVisible] = useState(false);\n\n  const handleLogout = () => {\n    actions.saveAccount(null);\n  };\n  const handleHistory = () => {\n    let url = getWocAddressUrl(account.network, key.address);\n    window.open(url);\n  };\n  const handleSourceCode = () => {\n    window.open(\"http://github.com\");\n  };\n\n  const decodeTx = () => {\n    const res = parseTransaction(network, rawtx);\n    console.log(\"decodeTx res\", res);\n  };\n\n  return (\n    <div className=\"header\">\n      <div className=\"logo\">Web Wallet</div>\n      {account && (\n        <Popover\n          title=\"\"\n          content={\n            <>\n              <Button type=\"link\" onClick={handleLogout}>\n                Logout\n              </Button>\n              <br />\n              <Button type=\"link\" onClick={handleHistory}>\n                History\n              </Button>\n              <br />\n              <Button type=\"link\" onClick={handleSourceCode}>\n                Source Code\n              </Button>\n              <br />\n              <Button type=\"link\" onClick={() => setDecodeModalVisible(true)}>\n                decode rawtx\n              </Button>\n            </>\n          }\n        >\n          <Button type=\"link\">{account.email}</Button>\n        </Popover>\n      )}\n      <Modal\n        visible={decodeModalVisible}\n        onCancel={() => setDecodeModalVisible(false)}\n      >\n        <Input.TextArea\n          rows={4}\n          value={rawtx}\n          onChange={(e) => setRawtx(e.target.value)}\n        ></Input.TextArea>\n        <Select\n          style={{ width: 180 }}\n          placeholder=\"Select network\"\n          value={network}\n          onChange={(value) => setNetwork(value)}\n        >\n          <Option value=\"mainnet\">mainnet</Option>\n          <Option value=\"testnet\">testnet</Option>\n        </Select>\n        <Button type=\"primary\" onClick={decodeTx}>\n          decode\n        </Button>\n      </Modal>\n      <Modal\n        visible={resultModalVisible}\n        onCancel={() => setResultModalVisible(false)}\n      ></Modal>\n    </div>\n  );\n}\n\nfunction LoginPanel() {\n  const [account] = useGlobalState(\"account\");\n  const [form] = Form.useForm();\n\n  const handleOnFinish = () => {\n    Modal.confirm({\n      title: \"安全注意\",\n      content: (\n        <div>\n          Web钱包的私钥是通过用户的用户名和密码实时计算得到，不会上传服务器，也不会保存在本地(代码见\n          <a\n            href=\"https://github.com/klouskingsley/bsv-web-wallet\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            github\n          </a>\n          )。仅供方便用户测试之用，不适合存放大量资金，建议用户妥善保管用户名+密码组合以防资金丢失，或在使用完成之后将剩余资金转移。用户名+密码组合丢失(忘记，被盗等情形)会导致资产丢失\n        </div>\n      ),\n      onOk: () => {\n        const account = form.getFieldsValue();\n        actions.saveAccount(account);\n      },\n    });\n  };\n  if (account) {\n    return null;\n  }\n\n  return (\n    <Card className=\"card\" title=\"Login\" bordered={false}>\n      <Form form={form} layout=\"vertical\" onFinish={handleOnFinish}>\n        <Form.Item\n          name=\"email\"\n          rules={[\n            {\n              type: \"email\",\n              required: true,\n              message: \"Please input a valid Email!\",\n            },\n          ]}\n        >\n          <Input\n            prefix={<UserOutlined className=\"site-form-item-icon\" />}\n            placeholder=\"Email\"\n          />\n        </Form.Item>\n        <Form.Item\n          name=\"password\"\n          rules={[\n            { required: true, message: \"Please input your Password!\" },\n            {\n              min: 6,\n              message: \"Password at least 6 chars\",\n              transform: (value) => value && value.trim(),\n            },\n          ]}\n        >\n          <Input.Password\n            prefix={<LockOutlined className=\"site-form-item-icon\" />}\n            type=\"password\"\n            visibilityToggle={true}\n            placeholder=\"Password\"\n          />\n        </Form.Item>\n        <Form.Item name=\"network\" label=\"Network\" rules={[{ required: true }]}>\n          <Select placeholder=\"Select network\">\n            <Option value=\"mainnet\">mainnet</Option>\n            <Option value=\"testnet\">testnet</Option>\n          </Select>\n        </Form.Item>\n        <Form.Item>\n          <Button\n            type=\"primary\"\n            htmlType=\"submit\"\n            className=\"login-form-button\"\n          >\n            Log in\n          </Button>\n        </Form.Item>\n      </Form>\n    </Card>\n  );\n}\n\nfunction AccountInfoPanel({ onWithDraw, onTransfer }) {\n  const [key] = useGlobalState(\"key\");\n  const [account] = useGlobalState(\"account\");\n  const [bsvBalance] = useGlobalState(\"bsvBalance\");\n  const [sensibleFtList] = useGlobalState(\"sensibleFtList\");\n\n  if (!key) {\n    return null;\n  }\n  const handleHistory = () => {\n    let url = getWocAddressUrl(account.network, key.address);\n    window.open(url);\n  };\n  const handleTransfer = (genesis) => {\n    if (!genesis) {\n      return onTransfer(\"\");\n    }\n    // if (!satotxConfigMap.has(genesis)) {\n    //   return message.error(\"rabin api not set or found\");\n    // }\n    return onTransfer(genesis);\n  };\n  return [\n    <Card\n      className=\"card\"\n      title=\"Account Info\"\n      bordered={false}\n      actions={\n        <>\n          <Button type=\"link\" onClick={handleHistory}>\n            history\n          </Button>\n          ,\n          <Button type=\"link\" onClick={onWithDraw}>\n            withdraw\n          </Button>\n          ,\n        </>\n      }\n    >\n      <Form layout=\"vertical\">\n        <Form.Item label={`${account.network} address`}>\n          <Input value={key.address} />\n          <div style={{ margin: 20 }}>\n            <QRCode value={key.address} />\n          </div>\n        </Form.Item>\n        <Form.Item label=\"privateKey\">\n          <Input.Password visibilityToggle={true} value={key.privateKey} />\n        </Form.Item>\n      </Form>\n    </Card>,\n    <Card className=\"card\" title=\"Asset\" bordered={false}>\n      <Form layout=\"vertical\">\n        {bsvBalance && (\n          <Form.Item label=\"BSV balance\">\n            <Row justify=\"space-between\">\n              <Col span={16}>\n                <div>{formatValue(bsvBalance.balance, 8)}</div>\n              </Col>\n              <Col span={7}>\n                <Button type=\"link\" onClick={() => handleTransfer(\"\")}>\n                  Transfer BSV\n                </Button>\n              </Col>\n            </Row>\n          </Form.Item>\n        )}\n        {sensibleFtList.length > 0 && (\n          <Form.Item label=\"Sensible Fungible Token\">\n            <List\n              itemLayout=\"horizontal\"\n              dataSource={sensibleFtList}\n              renderItem={(item) => {\n                return (\n                  <List.Item\n                    key={item.genesis}\n                    actions={\n                      <>\n                        <Popover\n                          placement=\"topRight\"\n                          content={\n                            <>\n                              <div>codehash: {item.codehash}</div>,\n                              <div>genesis: {item.genesis}</div>,\n                            </>\n                          }\n                        >\n                          <a\n                            key=\"list-loadmore-more\"\n                            href={getSensibleFtHistoryUrl(\n                              account.network,\n                              key.address,\n                              item.genesis,\n                              item.codehash\n                            )}\n                            rel=\"noreferrer\"\n                            target=\"_blank\"\n                          >\n                            more info\n                          </a>\n                        </Popover>\n                      </>\n                    }\n                  >\n                    <List.Item.Meta\n                      title={item.tokenSymbol}\n                      description={item.tokenName}\n                    />\n                    <Row>\n                      <Col>\n                        <div\n                          style={{\n                            height: \"100%\",\n                            display: \"flex\",\n                            alignItems: \"center\",\n                          }}\n                        >\n                          Balance:{\" \"}\n                          {formatValue(item.balance, item.tokenDecimal)}\n                        </div>\n                      </Col>\n                      <Col>\n                        <Button\n                          type=\"link\"\n                          onClick={() => handleTransfer(item.genesis)}\n                        >\n                          Go Transfer\n                        </Button>\n                      </Col>\n                    </Row>\n                  </List.Item>\n                );\n              }}\n            ></List>\n          </Form.Item>\n        )}\n      </Form>\n    </Card>,\n  ];\n}\n\nfunction TransferPanel({\n  genesis = \"\",\n  initReceivers = [],\n  onCancel,\n  onTransferCallback,\n}) {\n  const [key] = useGlobalState(\"key\");\n  const [bsvBalance] = useGlobalState(\"bsvBalance\");\n  const [account] = useGlobalState(\"account\");\n  const [sensibleFtList] = useGlobalState(\"sensibleFtList\");\n  const [satotxConfigMap] = useGlobalState(\"satotxConfigMap\");\n  const [form] = Form.useForm();\n  const [loading, setLoading] = useState(false);\n  const canEdit = !(initReceivers.length > 0);\n\n  useOnceCall(() => {\n    const isBsv = genesis === \"\";\n    const token = sensibleFtList.find((item) => item.genesis === genesis);\n    const decimal = isBsv ? 8 : token.tokenDecimal;\n    console.log(\n      \"initReceivers\",\n      initReceivers,\n      initReceivers.map((item) => {\n        return {\n          address: item.address,\n          amount: item.amount / 10 ** decimal,\n        };\n      })\n    );\n    form.setFieldsValue({\n      receiverList: initReceivers.map((item) => {\n        return {\n          address: item.address,\n          amount: item.amount / 10 ** decimal,\n        };\n      }),\n    });\n  }, key && bsvBalance && initReceivers.length);\n\n  if (!key) {\n    return null;\n  }\n  if (!bsvBalance) {\n    return null;\n  }\n  if (genesis && !sensibleFtList.length) {\n    return null;\n  }\n\n  const isBsv = genesis === \"\";\n  const token = sensibleFtList.find((item) => item.genesis === genesis);\n\n  if (!isBsv && !token) {\n    return null;\n  }\n  const tokenSymbol = isBsv ? \"BSV\" : token.tokenSymbol;\n  const decimal = isBsv ? 8 : token.tokenDecimal;\n  const balance = isBsv ? bsvBalance.balance : token.balance;\n  const formatBalance = formatValue(balance, decimal);\n\n  const handleSubmit = async () => {\n    const { receiverList } = form.getFieldsValue();\n    const totalOutputValue =\n      receiverList.reduce((prev, cur) => prev + cur.amount, 0) * 10 ** decimal;\n    if (balance < totalOutputValue) {\n      const msg = \"Insufficient balance\";\n      onTransferCallback({\n        error: msg,\n      });\n      return message.error(msg);\n    }\n\n    // 不存在的话，使用默认的 api.satotx.com\n    // if (!isBsv && !satotxConfigMap.has(genesis)) {\n    //   const msg = \"Token rabin signer not set yet\";\n    //   onTransferCallback({\n    //     error: msg,\n    //   });\n    //   return message.error(msg);\n    // }\n\n    const formatReceiverList = receiverList.map((item) => {\n      return {\n        address: item.address,\n        amount: item.amount * 10 ** decimal,\n      };\n    });\n\n    const broadcastBsv = async () => {\n      setLoading(true);\n      let txid = \"\";\n      let transferRes;\n      try {\n        const res = await await transferBsv(\n          account.network,\n          key.privateKey,\n          formatReceiverList\n        );\n        transferRes = res;\n        txid = res.txid;\n      } catch (err) {\n        const msg = \"broadcast error: \" + err.toString();\n        onTransferCallback({\n          error: msg,\n        });\n        console.log(\"broadcast bsv error \", err);\n        message.error(err.toString());\n      }\n      setLoading(false);\n      if (txid) {\n        onTransferCallback({\n          response: {\n            ...transferRes,\n          },\n        });\n        Modal.success({\n          title: \"Transaction broadcast success\",\n          content: (\n            <div>\n              txid:{\" \"}\n              <a\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                href={getWocTransactionUrl(account.network, txid)}\n              >\n                {txid}\n              </a>\n            </div>\n          ),\n        });\n      }\n    };\n\n    const broadcastSensibleFt = async () => {\n      setLoading(true);\n      let txid = \"\";\n      let transferRes;\n      try {\n        const signers = satotxConfigMap.get(genesis) || [\n          defaultSatotx,\n          defaultSatotx,\n          defaultSatotx,\n        ];\n        const res = await transferSensibleFt(\n          account.network,\n          signers,\n          key.privateKey,\n          formatReceiverList,\n          token.codehash,\n          token.genesis\n        );\n        transferRes = res;\n        txid = res.txid;\n      } catch (err) {\n        console.log(\"broadcast sensible ft error \");\n        console.error(err);\n        message.error(err.toString());\n      }\n      setLoading(false);\n      if (txid) {\n        onTransferCallback({\n          response: {\n            ...transferRes,\n          },\n        });\n        Modal.success({\n          title: \"Transaction broadcast success\",\n          content: (\n            <div>\n              txid:{\" \"}\n              <a\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                href={getWocTransactionUrl(account.network, txid)}\n              >\n                {txid}\n              </a>\n            </div>\n          ),\n        });\n      }\n    };\n\n    Modal.confirm({\n      title: \"Confirm the transaction\",\n      onOk: () => {\n        isBsv ? broadcastBsv() : broadcastSensibleFt();\n      },\n    });\n  };\n  const handleBack = () => {\n    onCancel();\n  };\n\n  return (\n    <Card\n      className=\"card\"\n      title={\n        <div style={{ cursor: \"pointer\" }} onClick={handleBack}>\n          <LeftOutlined />\n          Transfer\n        </div>\n      }\n      loading={loading}\n      bordered={false}\n    >\n      <Form form={form} layout=\"vertical\" onFinish={handleSubmit}>\n        <div className=\"transfer-line\">\n          {isBsv ? `Coin: ${tokenSymbol}` : `Token: ${tokenSymbol}`}\n        </div>\n        {!isBsv && (\n          <div className=\"transfer-line\">Genesis: {token.genesis}</div>\n        )}\n        {!isBsv && (\n          <div className=\"transfer-line\">Codehash: {token.codehash}</div>\n        )}\n        <Row justify=\"space-between\" style={{ margin: \"10px 0\" }}>\n          <Col span={14}>\n            <div style={{ fontWeight: 700 }}>Input</div>\n          </Col>\n        </Row>\n        <div className=\"transfer-line\">{`Balance: ${formatBalance}`}</div>\n        <div className=\"transfer-line\">{`From Address: ${key.address}`}</div>\n        <Row justify=\"space-between\" style={{ margin: \"10px 0\" }}>\n          <Col span={14}>\n            <div style={{ fontWeight: 700 }}>Output</div>\n          </Col>\n        </Row>\n        <Form.List name=\"receiverList\">\n          {(fields, { add, remove }) => (\n            <>\n              {fields.map((key, name, fieldKey, ...restField) => {\n                return (\n                  <Space\n                    key={key.fieldKey}\n                    style={{ display: \"flex\", marginBottom: 8 }}\n                    align=\"baseline\"\n                  >\n                    <Form.Item\n                      {...restField}\n                      name={[name, \"address\"]}\n                      fieldKey={[fieldKey, \"address\"]}\n                      rules={[\n                        {\n                          required: true,\n                          message: \"Please input the address\",\n                        },\n                        {\n                          message: \"invalid address\",\n                          validator: (_, value) =>\n                            isValidAddress(account.network, value)\n                              ? Promise.resolve()\n                              : Promise.reject(),\n                        },\n                      ]}\n                    >\n                      <Input\n                        placeholder=\"Input the address\"\n                        disabled={!canEdit}\n                      />\n                    </Form.Item>\n                    <Form.Item\n                      {...restField}\n                      name={[name, \"amount\"]}\n                      fieldKey={[fieldKey, \"amount\"]}\n                      rules={[\n                        { required: true, message: \"Please input amount\" },\n                      ]}\n                    >\n                      <InputNumber\n                        placeholder=\"Amount\"\n                        min={0}\n                        disabled={!canEdit}\n                      />\n                    </Form.Item>\n                    <Button\n                      disabled={!canEdit}\n                      size=\"small\"\n                      onClick={() => remove(name)}\n                      shape=\"circle\"\n                      icon={<MinusOutlined />}\n                    />\n                  </Space>\n                );\n              })}\n\n              <Form.Item>\n                <Button\n                  type=\"dashed\"\n                  onClick={() => add()}\n                  icon={<PlusOutlined />}\n                  disabled={!canEdit}\n                >\n                  Add Output\n                </Button>\n              </Form.Item>\n            </>\n          )}\n        </Form.List>\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\" block>\n            Transfer\n          </Button>\n        </Form.Item>\n      </Form>\n    </Card>\n  );\n}\n\nfunction App() {\n  useEffect(() => {\n    actions.recoverAccountFromStorage();\n  }, []);\n\n  const [trasfering, setTransfering] = useState(false);\n  const [trasferSensibleFtGenesis, setTrasferSensibleFtGenesis] = useState(\"\");\n  const [account] = useGlobalState(\"account\");\n  const [key] = useGlobalState(\"key\");\n  const [bsvBalance] = useGlobalState(\"bsvBalance\");\n  const [sensibleFtList] = useGlobalState(\"sensibleFtList\");\n  const [initReceivers, setInitReceivers] = useState([]);\n\n  const handleTransfer = (genesis) => {\n    setTransfering(true);\n    genesis && setTrasferSensibleFtGenesis(genesis);\n  };\n  const handleCancelTransfer = () => {\n    setTransfering(false);\n    setTrasferSensibleFtGenesis(\"\");\n  };\n\n  const getHashData = () => {\n    if (!window.opener) {\n      return null;\n    }\n    const hash = window.location.hash.substr(1);\n    try {\n      const data = JSON.parse(decodeURIComponent(hash));\n      if (data.type === \"popup\") {\n        if (typeof data.data === \"object\") {\n          return data;\n        }\n      }\n    } catch (err) {}\n    return null;\n  };\n  const handlePopResponseCallback = (resObj) => {\n    const data = getHashData();\n    if (!data) {\n      return;\n    }\n    const postMsg = createPostMsg(window.opener, \"*\");\n    postMsg.emit(data.id, {\n      type: \"response\",\n      data: {\n        ...data.data.data,\n        ...resObj,\n      },\n    });\n  };\n\n  // todo 数值计算 使用 bignumber\n  // todo 此处接收 postMessage 消息，处理登录,transfer\n  const requestAccountCondition = key?.address && account?.network;\n  const transferBsvCondition =\n    requestAccountCondition && bsvBalance && bsvBalance.balance >= 0;\n  useOnceCall(() => {\n    const data = getHashData();\n    if (!data || data.data.type !== \"request\") {\n      return;\n    }\n\n    const { method, params } = data.data.data;\n    if (method !== \"requestAccount\") {\n      return;\n    }\n    Modal.confirm({\n      title: \"Connect\",\n      content: (\n        <div>\n          Allow <b>{params.name}</b> to connect your web wallet\n        </div>\n      ),\n      onOk: () => {\n        handlePopResponseCallback({ response: true });\n      },\n      onCancel: () => {\n        handlePopResponseCallback({ error: \"user reject\" });\n      },\n    });\n  }, !!requestAccountCondition);\n  useOnceCall(() => {\n    const data = getHashData();\n    console.log(\"bsv hash data\", data);\n    if (!data || data.data.type !== \"request\") {\n      return;\n    }\n\n    const { method, params } = data.data.data;\n    if (method !== \"transferBsv\") {\n      return;\n    }\n    // balance check\n    const outputTotal = params.receivers.reduce(\n      (prev, cur) => prev + cur.amount,\n      0\n    );\n    if (outputTotal >= bsvBalance.balance) {\n      handlePopResponseCallback({ error: \"insufficient balance\" });\n      return;\n    }\n    setTransfering(true);\n    setInitReceivers(params.receivers);\n  }, !!transferBsvCondition);\n  useOnceCall(() => {\n    const data = getHashData();\n    console.log(\"hashdata\", data);\n    if (!data || data.data.type !== \"request\") {\n      return;\n    }\n\n    const { method, params } = data.data.data;\n    if (method !== \"transferSensibleFt\") {\n      return;\n    }\n    // sensibleft balance check\n    const outputTotal = params.receivers.reduce(\n      (prev, cur) => prev + cur.amount,\n      0\n    );\n    console.log(\"outputTotal\", outputTotal);\n    const ft = sensibleFtList.find((item) => item.genesis === params.genesis);\n    console.log(\"ft\", ft);\n    if (!ft) {\n      handlePopResponseCallback({ error: \"insufficient balance\" });\n      return;\n    }\n    if (outputTotal >= ft.balance) {\n      handlePopResponseCallback({ error: \"insufficient balance\" });\n      return;\n    }\n    setTransfering(true);\n    setTrasferSensibleFtGenesis(params.genesis);\n    setInitReceivers(params.receivers);\n  }, !!transferBsvCondition);\n  useEffect(() => {\n    const obu = window.onbeforeunload;\n    window.onbeforeunload = function (event) {\n      handlePopResponseCallback({ error: \"use closed\" });\n      return obu(event);\n    };\n  });\n\n  return (\n    <div className=\"App\" style={{ overflow: \"hidden\" }}>\n      <Header accountName=\"harry\" />\n      <LoginPanel />\n      {!trasfering && <AccountInfoPanel onTransfer={handleTransfer} />}\n      {trasfering && (\n        <TransferPanel\n          genesis={trasferSensibleFtGenesis}\n          onCancel={handleCancelTransfer}\n          onTransferCallback={handlePopResponseCallback}\n          initReceivers={initReceivers}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport * as actions from \"./state/action\";\n\nconst isIframe = window === window.top;\n\nif (isIframe) {\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n  );\n} else {\n  actions.runIframeTask();\n}\n\n// delete account when page/iframe exit\n(function () {\n  const obu = window.onbeforeunload;\n  window.onbeforeunload = function (event) {\n    const isPopup = !!window.opener;\n    if (!isPopup) {\n      actions.saveAccount(null);\n    }\n    return obu(event);\n  };\n})();\n\n// alert(window === window.top);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","\nexport interface UTXO {\n  txHash: number,\n  outputIndex: string;\n  satoshis: number;\n  script: string;\n}\n\nexport interface Output {\n  satoshis: number,\n  script: string;\n}\n\n\nexport interface Input {\n  utxo: UTXO,\n  sequence: number,\n  script: string;\n}\n\nexport interface Tx {\n  nLockTime?: number,\n  inputs: Input[],\n  outputs: Output[],\n}\n\nexport interface Account {\n  name: string,\n  paymail: string,\n  address: string,\n  permissions?: string[]\n}\n\n\nexport enum NetWork {\n  Testnet = 'testnet',\n  Mainnet = 'mainnet',\n  STN = 'STN'\n}\n\n\nexport enum SignType {\n  ALL = 0x00000001 | 0x00000040,\n  SINGLE = 0x00000003 | 0x00000040,\n  NONE = 0x00000002 | 0x00000040,\n  ANYONECANPAY_ALL = 0x00000001 | 0x00000040 | 0x00000080,\n  ANYONECANPAY_SINGLE = 0x00000003 | 0x00000040 | 0x00000080,\n  ANYONECANPAY_NONE = 0x00000002 | 0x00000040 | 0x00000080\n}\n\n\nexport abstract class wallet {\n\n  network: NetWork;\n\n  constructor(network: NetWork) {\n    this.network = network;\n  }\n\n  //Dapp use this api to connect to the wallet.\n  abstract requestAccount(name: string, permissions: string[]): Promise<Account>;\n\n  //get wallet balance\n  abstract getbalance(): Promise<number>;\n\n  //sign raw transaction, returns unlockscript of the p2pkh input if success\n  abstract signRawTransaction(tx: Tx, inputIndex: number, sigHashType: SignType\n  ): Promise<string>;\n\n  //get signature for special input\n  abstract getSignature(tx: Tx, inputIndex: number, sigHashType: SignType\n  ): Promise<string>;\n\n  //send raw transaction, returns transaction hash if success\n  abstract sendRawTransaction(rawTx: string): Promise<string>;\n\n  //returns array of unspent transaction outputs, which total amount is more than the minAmount argument.\n  abstract listUnspent(minAmount: number, options?: {\n    purpose?: string\n  }): Promise<UTXO[]>;\n\n  //returns a new Bitcoin address, for receiving change.\n  abstract getRawChangeAddress(options?: {\n    purpose?: string\n  }): Promise<string>;\n\n  //returns a public key\n  abstract getPublicKey(options?: {\n    purpose?: string\n  }): Promise<string>;\n\n}","\nimport { bsv, SigHashPreimage, getPreimage as getPreimage_ } from 'scryptlib';\nimport { SignType, Tx, UTXO } from './wallet';\n\n\nexport function signInput(privateKey: any, tx: any, inputIndex: number, sigHashType: number, utxo: UTXO): string {\n\n  tx.inputs[inputIndex].output = new bsv.Transaction.Output({\n    script: utxo.script,\n    satoshis: utxo.satoshis\n  });\n\n  const sig = new bsv.Transaction.Signature({\n    publicKey: privateKey.publicKey,\n    prevTxId: utxo.txHash,\n    outputIndex: utxo.outputIndex,\n    inputIndex,\n    signature: bsv.Transaction.Sighash.sign(tx, privateKey, sigHashType,\n      inputIndex,\n      tx.inputs[inputIndex].output.script,\n      tx.inputs[inputIndex].output.satoshisBN),\n    sigtype: sigHashType,\n  });\n\n  return bsv.Script.buildPublicKeyHashIn(\n    sig.publicKey,\n    sig.signature.toDER(),\n    sig.sigtype,\n  ).toHex();\n}\n\n\n\n\nexport function toBsvTx(tx: Tx) {\n  const tx_ = new bsv.Transaction();\n\n  tx.inputs.forEach(input => {\n    tx_.addInput(new bsv.Transaction.Input({\n      prevTxId: input.utxo.txHash,\n      outputIndex: input.utxo.outputIndex,\n      sequenceNumber: input.sequence,\n      script: input.script ? bsv.Script.fromHex(input.script) : new bsv.Script(),\n    }), bsv.Script.fromHex(input.utxo.script), input.utxo.satoshis);\n  });\n\n\n  tx.outputs.forEach(output => {\n    tx_.addOutput(new bsv.Transaction.Output({\n      script: bsv.Script.fromHex(output.script),\n      satoshis: output.satoshis,\n    }));\n  });\n\n  tx_.nLockTime = tx.nLockTime || 0;\n  return tx_;\n}\n\nexport function toRawTx(tx: Tx) {\n  return toBsvTx(tx).toString();\n}\n\n\n\nexport function getPreimage(tx: Tx, inputIndex = 0, sigHashType: SignType = SignType.ALL): SigHashPreimage {\n  const bsvTx = toBsvTx(tx);\n  return getPreimage_(bsvTx, bsv.Script.fromHex(tx.inputs[inputIndex].utxo.script).toASM(), tx.inputs[inputIndex].utxo.satoshis, inputIndex, sigHashType);\n}\n","import { Account, NetWork, UTXO, wallet, Tx, SignType } from './wallet';\nimport { toHex, bsv, signTx } from 'scryptlib';\nimport { signInput, toBsvTx } from './wutils';\nimport axios from 'axios';\n\n\nexport class LocalWallet extends wallet {\n  API_PREFIX: string;\n  privKey: any;\n  constructor(network: NetWork, key: string) {\n    super(network);\n    this.API_PREFIX = `https://api.whatsonchain.com/v1/bsv/${network === NetWork.Testnet ? 'test' : 'main'}`;\n    this.privKey = key ? new bsv.PrivateKey.fromWIF(key) : new bsv.PrivateKey.fromRandom(network);\n  }\n\n\n  requestAccount(name: string, permissions: string[]): Promise<Account> {\n    throw new Error('Method not implemented.');\n  }\n\n  async getbalance(): Promise<number> {\n\n    const {\n      data: balance\n    } = await axios.get(`${this.API_PREFIX}/address/${this.privKey.toAddress()}/balance`, {\n      timeout: 5000\n    });\n\n    return balance.confirmed + balance.unconfirmed;\n  }\n\n  async signRawTransaction(tx: Tx,\n    inputIndex: number,\n    sigHashType: SignType\n  ): Promise<string> {\n\n\n    const tx_ = toBsvTx(tx);\n\n    const utxo = tx.inputs[inputIndex].utxo;\n\n    return signInput(this.privKey, tx_, inputIndex, sigHashType, utxo);\n  }\n\n\n  async getSignature(tx: Tx,\n    inputIndex: number,\n    sigHashType: SignType\n  ): Promise<string> {\n\n\n    const tx_ = toBsvTx(tx);\n\n    return signTx(tx_, this.privKey, tx_.inputs[inputIndex].output.script.toASM(), tx_.inputs[inputIndex].output.satoshisBN, inputIndex, sigHashType);\n\n  }\n\n  async sendRawTransaction(rawTx: string): Promise<string> {\n\n    // 1 second per KB\n\n    const size = Math.max(1, rawTx.length / 2 / 1024); //KB\n    const time = Math.max(10000, 1000 * size);\n    const {\n      data: txid\n    } = await axios.post(`${this.API_PREFIX}/tx/raw`, {\n      txhex: rawTx\n    }, {\n      timeout: time\n    });\n    return txid;\n  }\n\n  async listUnspent(minAmount: number, options?: { purpose?: string; }): Promise<UTXO[]> {\n    return axios.get(`${this.API_PREFIX}/address/${this.privKey.toAddress()}/unspent`, {\n      timeout: 10000\n    }).then(res => {\n      return res.data.filter((utxo: any) => utxo.value >= minAmount).map((utxo: any) => {\n        return {\n          txHash: utxo.tx_hash,\n          outputIndex: utxo.tx_pos,\n          satoshis: utxo.value,\n          script: bsv.Script.buildPublicKeyHashOut(this.privKey.toAddress()).toHex(),\n        } as UTXO;\n      });\n    });\n  }\n\n\n  getRawChangeAddress(options?: { purpose?: string; }): Promise<string> {\n\n    return new Promise(resolve => resolve(this.privKey.toAddress() + ''));\n  }\n\n\n  getPublicKey(options?: { purpose?: string; }): Promise<string> {\n\n    return new Promise(resolve => resolve(toHex(this.privKey.publicKey)));\n  }\n\n}","import { buildContractClass, buildTypeClasses, ScryptType, bsv } from 'scryptlib';\nimport { } from 'scryptlib';\nimport { UTXO, wallet, Tx,SignType, NetWork } from './wallet';\nimport axios from 'axios';\nimport { AbstractContract } from 'scryptlib/dist/contract';\nimport { toRawTx } from './wutils';\nimport { LocalWallet } from './localwallet';\nconst WEB3_VERSION = '0.0.1';\n\nconst FEE = 2000;\n\nexport class web3 {\n\n\n  static wallet: wallet;\n\n\n  static setWallet(wallet: wallet) {\n    web3.wallet = wallet;\n  }\n\n\n  static version() {\n    return WEB3_VERSION;\n  }\n\n\n  static loadContract(url: string): Promise<{\n    contractClass: typeof AbstractContract,\n    types: Record<string, typeof ScryptType>\n  }> {\n\n    return axios.get(url, {\n      timeout: 10000\n    }).then(res => {\n\n      return {\n        contractClass: buildContractClass(res.data),\n        types: buildTypeClasses(res.data)\n      };\n    });\n  }\n\n\n\n  static async buildDeployTx(contract: AbstractContract, amountInContract: number, alicePrivateKey: string, bobPrivateKey: string): Promise<Tx> {\n\n    let aliceWallet = new LocalWallet(NetWork.Mainnet, alicePrivateKey);\n    let bobWallet = new LocalWallet(NetWork.Mainnet, bobPrivateKey);\n\n    const aliceChangeAddress = await aliceWallet.getRawChangeAddress();\n    const bobChangeAddress = await bobWallet.getRawChangeAddress();\n\n    const tx: Tx = {\n      inputs: [],\n      outputs: []\n    };\n\n    tx.outputs.push({\n      script: contract.lockingScript.toHex(),\n      satoshis: amountInContract * 2\n    });\n\n    const minAmount = amountInContract + FEE;\n\n    return aliceWallet.listUnspent(minAmount, {\n      purpose: 'change'\n    }).then(async (utxos: UTXO[]) => {\n\n      if (utxos.length === 0) {\n        throw new Error('no utxos');\n      }\n\n      //add input which using utxo from alice\n      tx.inputs.push(\n        {\n          utxo: utxos[0],\n          script: '',\n          sequence: 0\n        }\n      );\n\n      const changeAmount = utxos[0].satoshis - amountInContract - FEE;\n\n      if (changeAmount <= 0) {\n        throw new Error('fund is not enough');\n      }\n\n      //add alice change output\n\n      tx.outputs.push(\n        {\n          script: bsv.Script.buildPublicKeyHashOut(aliceChangeAddress).toHex(),\n          satoshis: changeAmount\n        }\n      );\n\n      return tx;\n    }).then(tx => {\n      return bobWallet.listUnspent(minAmount, {\n        purpose: 'change'\n      }).then(async (utxos: UTXO[]) => {\n\n        if (utxos.length === 0) {\n          throw new Error('no utxos');\n        }\n\n        //add input which using utxo from bob\n        tx.inputs.push(\n          {\n            utxo: utxos[0],\n            script: '',\n            sequence: 0\n          }\n        );\n\n        const changeAmount = utxos[0].satoshis - amountInContract - FEE;\n\n        if (changeAmount <= 0) {\n          throw new Error('fund is not enough');\n        }\n\n        //add bob change output\n        tx.outputs.push(\n          {\n            script: bsv.Script.buildPublicKeyHashOut(bobChangeAddress).toHex(),\n            satoshis: changeAmount\n          }\n        );\n\n        return tx;\n\n      })\n    }).then(tx => {\n      //alice sign\n      return aliceWallet.signRawTransaction(tx, 0, SignType.ALL).then(unlockscript => {\n        tx.inputs[0].script = unlockscript;\n        return tx;\n      })\n    }).then(tx => {\n      //bob sign\n      return bobWallet.signRawTransaction(tx, 1, SignType.ALL).then(unlockscript => {\n        tx.inputs[1].script = unlockscript;\n        return tx;\n      })\n    })\n  }\n\n\n  static async sendRawTx(rawTx: string): Promise<string> {\n    return web3.wallet.sendRawTransaction(rawTx);\n  }\n\n  static async sendTx(tx: Tx): Promise<string> {\n    return web3.wallet.sendRawTransaction(toRawTx(tx));\n  }\n\n\n  static async deploy(contract: AbstractContract, amountInContract: number, alicePrivateKey: string, bobPrivateKey: string): Promise<[Tx, string]> {\n    return web3.buildDeployTx(contract, amountInContract, alicePrivateKey, bobPrivateKey).then(async tx => {\n      return web3.sendTx(tx).then(txid => {\n        return [tx, txid];\n      })\n    });\n  }\n}"],"sourceRoot":""}