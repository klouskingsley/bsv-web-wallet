{"version":3,"sources":["lib/index.ts","state/state.ts","state/action.ts","hooks.js","App.js","reportWebVitals.js","index.js","web3/wallet.ts","web3/wutils.ts","web3/localwallet.ts","web3/web3.ts"],"names":["getSensibleApiPrefix","network","test","NetWork","Mainnet","isSensibleSuccess","res","code","msg","formatValue","value","decimal","isValidAddress","address","bsv","Address","_","generateKeysFromEmailPassword","email","pass","Testnet","s","length","regchars","match","regupchars","regnums","bufferS","Buffer","from","crypto","Hash","sha256","i","tmp","toString","hex","privateKey","PrivateKey","toAddress","publicKey","toPublicKey","getSensibleFtHistoryUrl","genesis","codehash","getWocAddressUrl","url","getWocTransactionUrl","txid","getAddressSensibleFtList","a","apiPrefix","axios","get","data","map","item","tokenName","name","tokenSymbol","symbol","tokenDecimal","balance","pendingBalance","Error","getAddressBsvUtxoList","page","cursor","txId","outputIndex","vout","satoshis","satoshi","getAddressBsvBalance","broadcastSensibleQeury","rawtx","apiPrefx","post","txHex","Transaction","hash","transferSensibleFt","signers","senderWif","receivers","SensibleFT","selectSigners","selectRes","ft","purse","feeb","signerSelecteds","transfer","Signature","sighashType","SIGHASH_ALL","SIGHASH_FORKID","unlockP2PKHInput","tx","inputIndex","sigtype","sig","prevTxId","inputs","signature","Sighash","sign","output","script","satoshisBN","setScript","Script","buildPublicKeyHashIn","toDER","transferBsv","console","log","totalOutput","reduce","prev","cur","amount","utxoValue","selectedUtxoList","feePerKb","dust","utxoResList","push","addInput","Input","PublicKeyHash","Output","buildPublicKeyHashOut","empty","forEach","to","change","getFee","clearOutputs","serialize","defaultSatotx","satotxApiPrefix","satotxPubKey","initialState","account","key","bsvBalance","sensibleFtList","satotxConfigMap","Map","set","createGlobalState","useGlobalState","getGlobalState","setGlobalState","accountStorageKey","saveAccountStorage","str","JSON","stringify","localStorage","setItem","getAccountStorage","getItem","parse","pollingBsvTimer","pollingSensibleFtTimer","pollingBsvBalance","clearInterval","fn","window","setInterval","pollingSensibleFtBalance","saveAccount","password","sleep","ms","Promise","resolve","setTimeout","top","hashdata","decodeURIComponent","location","substr","postMsg","createPostMsg","id","preAccount","preBsvBalance","preSensibleFtBalance","accountKey","emit","type","isBsvBalanceEqual","b1","b2","isSensibleFtBalanceEqual","sort","item1","item2","localeCompare","isAccountEqual","requestLatestData","latestAccount","latestBalance","equal","handleRequest","method","on","eventData","requestId","params","response","error","signed","useOnceCall","cb","condition","isCalledRef","useRef","useEffect","current","Option","Select","Header","className","title","content","onClick","actions","open","LoginPanel","Form","useForm","form","bordered","layout","onFinish","getFieldsValue","Item","rules","required","message","prefix","UserOutlined","placeholder","min","transform","trim","Password","LockOutlined","visibilityToggle","label","htmlType","AccountInfoPanel","onWithDraw","onTransfer","handleTransfer","style","margin","justify","span","itemLayout","dataSource","renderItem","placement","href","rel","target","Meta","description","height","display","alignItems","TransferPanel","initReceivers","onCancel","onTransferCallback","useState","loading","setLoading","canEdit","isBsv","token","find","setFieldsValue","receiverList","formatBalance","handleSubmit","totalOutputValue","formatReceiverList","broadcastBsv","Modal","success","broadcastSensibleFt","confirm","onOk","LeftOutlined","fontWeight","List","fields","add","remove","fieldKey","restField","marginBottom","align","validator","reject","disabled","size","shape","icon","MinusOutlined","PlusOutlined","block","App","trasfering","setTransfering","trasferSensibleFtGenesis","setTrasferSensibleFtGenesis","setInitReceivers","getHashData","opener","err","handlePopResponseCallback","resObj","requestAccountCondition","transferBsvCondition","outputTotal","onbeforeunload","overflow","accountName","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","SignType","wallet","this","signInput","sigHashType","utxo","txHash","toHex","toBsvTx","tx_","input","sequenceNumber","sequence","fromHex","outputs","addOutput","nLockTime","toRawTx","LocalWallet","API_PREFIX","privKey","fromWIF","fromRandom","permissions","timeout","confirmed","unconfirmed","signTx","toASM","rawTx","Math","max","time","txhex","minAmount","options","filter","tx_hash","tx_pos","FEE","web3","contractClass","buildContractClass","types","buildTypeClasses","contract","amountInContract","alicePrivateKey","bobPrivateKey","aliceWallet","bobWallet","getRawChangeAddress","aliceChangeAddress","bobChangeAddress","lockingScript","listUnspent","purpose","utxos","changeAmount","signRawTransaction","ALL","unlockscript","sendRawTransaction","buildDeployTx","sendTx"],"mappings":"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","file":"static/js/main.a3767408.chunk.js","sourcesContent":["import { bsv } from 'scryptlib';\nimport { NetWork } from '../web3';\nimport {Key, SensibleFt, SensibleSatotx, TransferReceiver, BsvUtxo} from '../state/stateType'\nimport axios from 'axios'\nimport {SensibleFT} from 'sensible-sdk'\n\nfunction getSensibleApiPrefix(network: NetWork) {\n    const test = network === NetWork.Mainnet ? '' : '/test'\n    return `https://api.sensiblequery.com${test}`\n}\nfunction isSensibleSuccess(res: any) {\n    return res.code === 0 && res.msg === 'ok'\n}\n\nexport function formatValue(value: number, decimal: number) {\n    // const bigNum = bsv.crypto.BN.fromNumber(value)\n    // return bigNum.div(10**decimal).toString(10)\n    return value / (10**decimal)\n}\n\nexport function isValidAddress(network: NetWork, address: string) {\n    try {\n        new bsv.Address(address, network)\n        return true\n    } catch (_) {\n        return false\n    }\n}\n\nexport function generateKeysFromEmailPassword(email: string, pass: string, network: NetWork = NetWork.Testnet): Key {\n    let s: string = email\n    s += '|'+pass+'|';\n    s += s.length+'|!@'+((pass.length*7)+email.length)*7;\n    var regchars = (pass.match(/[a-z]+/g)) ? pass.match(/[a-z]+/g)!.length : 1;\n    var regupchars = (pass.match(/[A-Z]+/g)) ? pass.match(/[A-Z]+/g)!.length : 1;\n    var regnums = (pass.match(/[0-9]+/g)) ? pass.match(/[0-9]+/g)!.length : 1;\n    s += ((regnums+regchars)+regupchars)*pass.length+'3571';\n    s += (s+''+s);\n\n    let bufferS = Buffer.from(s)\n    bufferS = bsv.crypto.Hash.sha256(bufferS)\n\tfor(let i=0;i<=49;i++){\n        const tmp = Buffer.from(bufferS.toString('hex'))\n        bufferS = bsv.crypto.Hash.sha256(tmp)\n\t}\n    const hex = bsv.crypto.Hash.sha256(Buffer.from(bufferS.toString('hex'))).toString('hex')\n    \n    const privateKey = new bsv.PrivateKey(hex, network)\n    const address = privateKey.toAddress(network).toString()\n    \n    return {\n        address,\n        privateKey: privateKey.toString(),\n        publicKey: privateKey.toPublicKey().toString()\n    }\n}\n\nexport function getSensibleFtHistoryUrl(network: NetWork, address: string, genesis: string, codehash: string) {\n    // https://sensiblequery.com/#/ft/utxo/a1961d0c0ab39f1bd0f79c2f6ae27138cca0620c/d4266deb03b5fdb7c9af39fa71f86f4b1f6390422e9bcd1556399a3f0063965f00000000/1111111111111111111114oLvT2\n    const test = network === NetWork.Mainnet ? '' : '/test'\n    return `https://sensiblequery.com${test}/#/ft/utxo/${codehash}/${genesis}/${address}`\n}\n\n\nexport function getWocAddressUrl(network: NetWork, address: string) {\n    let url = ''\n    if (network === NetWork.Mainnet) {\n        url = 'https://whatsonchain.com/address/'\n    } \n    if (network === NetWork.Testnet) {\n        url = 'https://test.whatsonchain.com/address/'\n    }\n    if (!url) {\n        return url\n    }\n    url += address\n    return url\n}\n\nexport function getWocTransactionUrl(network: NetWork, txid: string) {\n    let url = ''\n    if (network === NetWork.Mainnet) {\n        url = 'https://whatsonchain.com/tx/'\n    } \n    if (network === NetWork.Testnet) {\n        url = 'https://test.whatsonchain.com/tx/'\n    }\n    if (!url) {\n        return url\n    }\n    url += txid\n    return url\n}\n\n// todo 分页获取\nexport async function getAddressSensibleFtList(network: NetWork, address: string): Promise<SensibleFt[]> {\n    // todo remove next line\n    const apiPrefix = getSensibleApiPrefix(network)\n    const {data} = await axios.get(`${apiPrefix}/ft/summary/${address}?cursor=0&size=20`)\n    const success = isSensibleSuccess(data)\n\n    if (success) {\n        return (data.data || []).map((item: any) => {\n            return {\n                genesis: item.genesis,\n                codehash: item.codehash,\n                tokenName: item.name,\n                tokenSymbol: item.symbol,\n                tokenDecimal: item.decimal,\n                balance: item.balance + item.pendingBalance,\n            }\n        })\n    }\n    throw new Error(data.msg)\n}\n\n// 获取 bsv utxo\nexport async function getAddressBsvUtxoList(network: NetWork, address: string, page: number): Promise<BsvUtxo[]> {\n    const pageSize = 16\n    const cursor = (page - 1) * pageSize\n    const apiPrefix = getSensibleApiPrefix(network)\n    const {data} = await axios.get(`${apiPrefix}/address/${address}/utxo?cursor=${cursor}&size=${pageSize}`)\n    const success = isSensibleSuccess(data)\n    if (success) {\n        return (data.data || []).map((item: any) => {\n            return {\n                txId: item.txid, \n                outputIndex: item.vout,\n                satoshis: item.satoshi,\n                address: address,\n            }\n        })\n    }\n    throw new Error(data.msg)\n}\n\n// 获取bsv 余额\nexport async function getAddressBsvBalance(network: NetWork, address: string): Promise<number> {\n    const apiPrefix = getSensibleApiPrefix(network)\n    const {data} = await axios.get(`${apiPrefix}/address/${address}/balance`)\n    const success = isSensibleSuccess(data)\n    if (success) {\n        return data.data.satoshi\n    }\n    throw new Error(data.msg)\n}\n\n// 获取 sensible ft 余额\nexport async function getAddressSensibleFtBalance(network: NetWork, address: string, codehash: string, genesis: string): Promise<number> {\n    const apiPrefix = getSensibleApiPrefix(network)\n    const {data} = await axios.get(`${apiPrefix}/ft/balance/${codehash}/${genesis}/${address}`)\n    const success = isSensibleSuccess(data)\n    if (success) {\n        return data.data.satoshi\n    }\n    throw new Error(data.msg)\n}\n\n// 获取 sensible 余额 地址\nexport async function getSensibleAddressUrl(network: NetWork, address: string, codehash: string, genesis: string) {\n    const test = network === NetWork.Mainnet ? '' : '/test'\n    // https://sensiblequery.com/#/ft/utxo/ac939f3cf7aba022d09f05e5448f1e635c81dbb3/598d220eaecb68cf783cbc6cc6295d042897874f/1FJCX1QG7KyaHpx1U2iVe4xoAWNVB1Wd3L\n    return `https://sensiblequery.com${test}/#/ft/utxo/${codehash}/${genesis}/${address}`\n}\n\n\n// 广播交易\nexport async function broadcastSensibleQeury(network: NetWork, rawtx: string) {\n    const apiPrefx = getSensibleApiPrefix(network)\n    const {data} = await axios.post(`${apiPrefx}/pushtx`, {\n        txHex: rawtx,\n    })\n    const success = isSensibleSuccess(data)\n    if (success) {\n        return new bsv.Transaction(rawtx).hash\n    }\n    return new Error(data.msg)\n}\n\n\n// 发送 token 交易\nexport async function transferSensibleFt(network: NetWork, signers: SensibleSatotx[], senderWif: string, receivers: TransferReceiver[], codehash: string, genesis: string){\n    const selectRes = await SensibleFT.selectSigners()\n    const ft = new SensibleFT({\n        network: network as any,\n        purse: senderWif,\n        feeb: 0.5,\n        signerSelecteds: selectRes.signerSelecteds,\n        signers: selectRes.signers,\n    })\n    const {txid} = await ft.transfer({\n        senderWif: senderWif,\n        receivers,\n        codehash,\n        genesis,\n    })\n    return {txid}\n}\n\nconst Signature = bsv.crypto.Signature;\nexport const sighashType = Signature.SIGHASH_ALL | Signature.SIGHASH_FORKID;\n\n\n// p2pkh 解锁\nexport function unlockP2PKHInput(privateKey: bsv.PrivateKey, tx: bsv.Transaction, inputIndex: number, sigtype: number) {\n    const sig = new bsv.Transaction.Signature({\n      publicKey: privateKey.publicKey,\n      prevTxId: tx.inputs[inputIndex].prevTxId,\n      outputIndex: tx.inputs[inputIndex].outputIndex,\n      inputIndex,\n      signature: bsv.Transaction.Sighash.sign(\n        tx,\n        privateKey,\n        sigtype,\n        inputIndex,\n        tx.inputs[inputIndex].output.script,\n        tx.inputs[inputIndex].output.satoshisBN\n      ),\n      sigtype,\n    });\n  \n    tx.inputs[inputIndex].setScript(\n      bsv.Script.buildPublicKeyHashIn(\n        sig.publicKey,\n        sig.signature.toDER(),\n        sig.sigtype\n      )\n    );\n  }\n\n// 发送 bsv 交易\nexport async function transferBsv(network: NetWork, senderWif: string, receivers: TransferReceiver[]) {\n    // 1. 获取用户 utxo 列表\n    // 2. 判断 utxo 金额 是否 满足 receivers 金额\n    // 3. 构造交易\n    // 4. 广播交易\n    console.log('arguments', network, senderWif, receivers)\n    const address = new bsv.PrivateKey(senderWif, network).toAddress(network)\n    const balance = await getAddressBsvBalance(network, address)\n    const totalOutput = receivers.reduce((prev, cur) => prev + cur.amount, 0)\n    if (balance < totalOutput) {\n        throw new Error('Insufficient_Balance')\n    }\n    let utxoValue = 0\n    let selectedUtxoList = []\n\n    const tx = new bsv.Transaction()\n    tx.feePerKb(500)\n    const dust = 456\n\n    // input = output + fee + change\n    // 异常情况: 加上 change 后, fee 增加, 原本 input 不够了, 此时将所有输出移除, 然后\n    \n    for (let page = 1; ;page++) {\n        const utxoResList = await getAddressBsvUtxoList(network, address, page)\n        for (let i = 0; i < utxoResList.length; i++) {\n            const item = utxoResList[i]\n            utxoValue += item.satoshis\n            selectedUtxoList.push(item)\n            tx.addInput(\n                new bsv.Transaction.Input.PublicKeyHash({\n                    output: new bsv.Transaction.Output({\n                        script: bsv.Script.buildPublicKeyHashOut(item.address),\n                        satoshis: item.satoshis,\n                    }),\n                    prevTxId: item.txId,\n                    outputIndex: item.outputIndex,\n                    script: bsv.Script.empty(),\n                })\n            );\n            if (totalOutput <= utxoValue) {\n                break\n            }\n        }\n        if (totalOutput <= utxoValue) {\n            break\n        }\n    }\n    receivers.forEach(item => {\n        tx.to(item.address, item.amount)\n    })\n    if (utxoValue - totalOutput > 0) {\n        tx.change(address)\n    }\n    if (utxoValue + tx.getFee() + dust > totalOutput) {\n        tx.clearOutputs()\n        receivers.forEach(item => {\n            tx.to(item.address, item.amount)\n        })\n    }\n    tx.inputs.forEach((_: any, inputIndex: number) => {\n        const privateKey = new bsv.PrivateKey(senderWif)\n        unlockP2PKHInput(privateKey, tx, inputIndex, sighashType);\n    });\n    const txid = await broadcastSensibleQeury(network, tx.serialize())\n    return {\n        txid\n    }\n}\n","import { createGlobalState } from \"react-hooks-global-state\";\nimport {State, SensibleSatotx} from './stateType'\n\nconst defaultSatotx: SensibleSatotx = {\n    satotxApiPrefix: 'https://api.satotx.com', \n    satotxPubKey: '25108ec89eb96b99314619eb5b124f11f00307a833cda48f5ab1865a04d4cfa567095ea4dd47cdf5c7568cd8efa77805197a67943fe965b0a558216011c374aa06a7527b20b0ce9471e399fa752e8c8b72a12527768a9fc7092f1a7057c1a1514b59df4d154df0d5994ff3b386a04d819474efbd99fb10681db58b1bd857f6d5'\n}\n\n// app state\nconst initialState: State = {\n    account: null,\n    key: null,\n    bsvBalance: null,\n    sensibleFtList: [],\n    satotxConfigMap: new Map()\n};\ninitialState.satotxConfigMap.set(\n    '5b3bfa8e7600d701e70551075573ea28fd16c25a39fe2bdafdc3e08b11ca76b800000000', \n    [defaultSatotx, defaultSatotx, defaultSatotx]\n)\nconst { useGlobalState, getGlobalState, setGlobalState } = createGlobalState(initialState);\n\nexport {\n    useGlobalState,\n    getGlobalState,\n    setGlobalState,\n    defaultSatotx,\n}\n","import {setGlobalState, getGlobalState } from './state'\nimport {generateKeysFromEmailPassword, getAddressSensibleFtList, getAddressBsvBalance} from '../lib'\nimport {Account, BalanceBsv, Key, SensibleFt} from './stateType'\nimport * as createPostMsg from 'post-msg';\n\n// local account storage\nconst accountStorageKey = 'accountStorageKey'\nfunction saveAccountStorage(account: Account | null) {\n    const str = account ? JSON.stringify(account) : ''\n    localStorage.setItem(accountStorageKey, str)\n}\nfunction getAccountStorage(): Account | null {\n    const str = localStorage.getItem(accountStorageKey)\n    if (!str) {\n        return null\n    }\n    return JSON.parse(str)\n}\n\n// app action\nlet pollingBsvTimer = 0\nlet pollingSensibleFtTimer = 0\nexport async function pollingBsvBalance(){\n    clearInterval(pollingBsvTimer)\n    const fn = async () => {\n        const account = getGlobalState('account')\n        const key = getGlobalState('key')\n        if (!account || !key) {\n            return\n        }\n        try {\n            const balance = await getAddressBsvBalance(account.network, key.address)\n            setGlobalState('bsvBalance', {balance})\n        } catch (err) {\n            console.log('getAddressBsvBalance err', account.network, key.address, err)\n        }\n    }\n    await fn()\n    pollingBsvTimer = window.setInterval(fn, 5000)\n}\nexport async function pollingSensibleFtBalance() {\n    clearInterval(pollingSensibleFtTimer)\n    const fn = async () => {\n        const account = getGlobalState('account')\n        const key = getGlobalState('key')\n        if (!account || !key) {\n            return\n        }\n        try {\n            const sensibleFtList = await getAddressSensibleFtList(account.network, key.address)\n            setGlobalState('sensibleFtList', sensibleFtList)\n        } catch (err) {\n            console.log('getAddressSensibleFtList err', account.network, key.address, err)\n        }\n    }\n    await fn()\n    pollingSensibleFtTimer = window.setInterval(fn, 5000)\n}\n\nexport async function saveAccount(account: Account | null) {\n    saveAccountStorage(account)\n    if (account) {\n        const key = generateKeysFromEmailPassword(account.email, account.password, account.network)\n        setGlobalState('account', account)\n        setGlobalState('key', key)\n        await pollingSensibleFtBalance()\n        pollingBsvBalance()\n    } else {\n        setGlobalState(\"account\", null)\n        setGlobalState('key', null)\n    }\n}\n\nexport function recoverAccountFromStorage() {\n    const account = getAccountStorage()\n    saveAccount(account)\n}\n\nconst sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms))\n\n// iframe action\nexport async function runIframeTask() {\n    if (window === window.top) {\n        return\n    }\n    const hashdata = JSON.parse(decodeURIComponent(window.location.hash.substr(1)))\n    const postMsg = createPostMsg(window.top, '*')\n    const id = hashdata.id\n\n    let preAccount: Account | null = null\n    let preBsvBalance: BalanceBsv | null = null\n    let preSensibleFtBalance: SensibleFt[] = []\n    let accountKey: Key | null = null\n    // let lastBsvBalance: \n\n    postMsg.emit(id, {\n        type: 'ready'\n    })\n\n    const isBsvBalanceEqual = (b1: BalanceBsv | null, b2: BalanceBsv | null) => {\n        if (!b1 && !b2) {\n            return true\n        }\n        return b1?.balance === b2?.balance\n    }\n    const isSensibleFtBalanceEqual = (b1: SensibleFt[], b2: SensibleFt[]) => {\n        if (b1.length !== b2.length) {\n            return false\n        }\n        b1.sort((item1, item2) => item1.genesis.localeCompare(item2.genesis))\n        b2.sort((item1, item2) => item1.genesis.localeCompare(item2.genesis))\n\n        for (let i = 0; i < b1.length; i++) {\n            const item1 = b1[i]\n            const item2 = b2[i]\n            if (item1.genesis !== item2.genesis) {\n                return false\n            }\n            if (item1.balance !== item2.balance) {\n                return false\n            }\n        }                \n        return true\n    }\n    const isAccountEqual = (b1: Account | null, b2: Account | null) => {\n        return (\n            b1?.email === b2?.email &&\n            b1?.network === b2?.network &&\n            b1?.password === b2?.password\n        )\n    }\n    const requestLatestData = async () => {\n        const latestAccount = getAccountStorage()\n        if (!(isAccountEqual(latestAccount, preAccount))) {\n            postMsg.emit(id, {\n                type: 'account',\n                data: latestAccount\n            })\n        }\n        preAccount = latestAccount;\n        if (preAccount) {\n            // get balance\n            accountKey = generateKeysFromEmailPassword(preAccount.email, preAccount.password, preAccount.network)\n            try {\n                const latestBalance = await getAddressBsvBalance(preAccount.network, accountKey.address)\n                const equal = isBsvBalanceEqual(preBsvBalance, {balance: latestBalance})\n                preBsvBalance = {balance: latestBalance}\n                if (!equal) {\n                    postMsg.emit(id, {\n                        type: 'bsvBalance', \n                        data: preBsvBalance,\n                    })\n                }\n            } catch (err) {}\n            try {\n                const latestBalance = await getAddressSensibleFtList(preAccount.network, accountKey.address)\n                const equal = isSensibleFtBalanceEqual(preSensibleFtBalance, latestBalance)\n                preSensibleFtBalance = latestBalance\n                if (!equal) {\n                    postMsg.emit(id, {\n                        type: 'sensibleFtBalance',\n                        data: preSensibleFtBalance\n                    })\n                }\n            } catch (err) {}\n            return true\n        } else {\n            return false\n        }\n    }\n\n    const handleRequest = (method: string, fn: Function) => {\n        postMsg.on(id, async function (_: any, eventData: any) {\n            const {type, data} = eventData\n            if (type === 'request' && data?.method === method) {\n                const requestId = data.requestId\n                try {\n                    const res = await fn(data.params)\n                    postMsg.emit(id, {\n                        type: 'response',\n                        data: {\n                            requestId,\n                            method,\n                            response: res,\n                        }\n                    })\n                } catch (err) {\n                    postMsg.emit(id, {\n                        type: 'response',\n                        data: {\n                            requestId,\n                            method,\n                            error: err.toString()\n                        }\n                    })\n                }\n            }\n        })\n    }\n\n    handleRequest('getAccount', async () => {\n        await requestLatestData()\n        if (!preAccount) {\n            return null\n        }\n        return {\n            name: preAccount.email,\n            email: preAccount.email,\n            network: preAccount.network,\n        }\n    });\n    handleRequest('getBsvBalance', async () => {\n        await requestLatestData()\n        return preBsvBalance\n    })\n    handleRequest('getSensibleFtBalance', async () => {\n        await requestLatestData()\n        return preSensibleFtBalance\n    })\n    handleRequest('getAddress', async () => {\n        await requestLatestData()\n        if (!accountKey) {\n            return null\n        }\n        return accountKey.address\n    })\n\n    for (;;) {\n        const signed = await requestLatestData()\n        await sleep(signed ? 3000 : 500)\n    }\n\n}","import { useRef, useEffect } from \"react\";\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    let id = setInterval(tick, delay);\n    return () => clearInterval(id);\n  }, [delay]);\n}\n\nexport function useOnceCall(cb, condition = true) {\n  const isCalledRef = useRef(false);\n  useEffect(() => {\n    if (condition && !isCalledRef.current) {\n      isCalledRef.current = true;\n      cb();\n    }\n  }, [cb, condition]);\n}\n","import {\n  Button,\n  Popover,\n  Card,\n  Form,\n  Input,\n  Select,\n  List,\n  Row,\n  Col,\n  message,\n  InputNumber,\n  Space,\n  Modal,\n} from \"antd\";\nimport {\n  UserOutlined,\n  LockOutlined,\n  MinusOutlined,\n  PlusOutlined,\n  LeftOutlined,\n} from \"@ant-design/icons\";\nimport { useState, useEffect } from \"react\";\nimport * as QRCode from \"qrcode.react\";\nimport {\n  getWocAddressUrl,\n  formatValue,\n  isValidAddress,\n  transferBsv,\n  transferSensibleFt,\n  getWocTransactionUrl,\n  getSensibleFtHistoryUrl,\n} from \"./lib\";\nimport * as createPostMsg from \"post-msg\";\nimport { useGlobalState, defaultSatotx } from \"./state/state\";\nimport * as actions from \"./state/action\";\nimport { useOnceCall } from \"./hooks\";\nimport \"./App.css\";\n\nconst { Option } = Select;\n\nfunction Header() {\n  const [account] = useGlobalState(\"account\");\n  const [key] = useGlobalState(\"key\");\n\n  const handleLogout = () => {\n    actions.saveAccount(null);\n  };\n  const handleHistory = () => {\n    let url = getWocAddressUrl(account.network, key.address);\n    window.open(url);\n  };\n  const handleSourceCode = () => {\n    window.open(\"http://github.com\");\n  };\n\n  return (\n    <div className=\"header\">\n      <div className=\"logo\">Web Wallet</div>\n      {account && (\n        <Popover\n          title=\"\"\n          content={\n            <>\n              <Button type=\"link\" onClick={handleLogout}>\n                Logout\n              </Button>\n              <br />\n              <Button type=\"link\" onClick={handleHistory}>\n                History\n              </Button>\n              <br />\n              <Button type=\"link\" onClick={handleSourceCode}>\n                Source Code\n              </Button>\n            </>\n          }\n        >\n          <Button type=\"link\">{account.email}</Button>\n        </Popover>\n      )}\n    </div>\n  );\n}\n\nfunction LoginPanel() {\n  const [account] = useGlobalState(\"account\");\n  const [form] = Form.useForm();\n\n  const handleOnFinish = () => {\n    const account = form.getFieldsValue();\n    actions.saveAccount(account);\n  };\n  if (account) {\n    return null;\n  }\n\n  return (\n    <Card className=\"card\" title=\"Login\" bordered={false}>\n      <Form form={form} layout=\"vertical\" onFinish={handleOnFinish}>\n        <Form.Item\n          name=\"email\"\n          rules={[\n            {\n              type: \"email\",\n              required: true,\n              message: \"Please input a valid Email!\",\n            },\n          ]}\n        >\n          <Input\n            prefix={<UserOutlined className=\"site-form-item-icon\" />}\n            placeholder=\"Email\"\n          />\n        </Form.Item>\n        <Form.Item\n          name=\"password\"\n          rules={[\n            { required: true, message: \"Please input your Password!\" },\n            {\n              min: 6,\n              message: \"Password at least 6 chars\",\n              transform: (value) => value && value.trim(),\n            },\n          ]}\n        >\n          <Input.Password\n            prefix={<LockOutlined className=\"site-form-item-icon\" />}\n            type=\"password\"\n            visibilityToggle={true}\n            placeholder=\"Password\"\n          />\n        </Form.Item>\n        <Form.Item name=\"network\" label=\"Network\" rules={[{ required: true }]}>\n          <Select placeholder=\"Select network\">\n            <Option value=\"mainnet\">mainnet</Option>\n            <Option value=\"testnet\">testnet</Option>\n          </Select>\n        </Form.Item>\n        <Form.Item>\n          <Button\n            type=\"primary\"\n            htmlType=\"submit\"\n            className=\"login-form-button\"\n          >\n            Log in\n          </Button>\n        </Form.Item>\n      </Form>\n    </Card>\n  );\n}\n\nfunction AccountInfoPanel({ onWithDraw, onTransfer }) {\n  const [key] = useGlobalState(\"key\");\n  const [account] = useGlobalState(\"account\");\n  const [bsvBalance] = useGlobalState(\"bsvBalance\");\n  const [sensibleFtList] = useGlobalState(\"sensibleFtList\");\n\n  if (!key) {\n    return null;\n  }\n  const handleHistory = () => {\n    let url = getWocAddressUrl(account.network, key.address);\n    window.open(url);\n  };\n  const handleTransfer = (genesis) => {\n    if (!genesis) {\n      return onTransfer(\"\");\n    }\n    // if (!satotxConfigMap.has(genesis)) {\n    //   return message.error(\"rabin api not set or found\");\n    // }\n    return onTransfer(genesis);\n  };\n  return [\n    <Card\n      className=\"card\"\n      title=\"Account Info\"\n      bordered={false}\n      actions={\n        <>\n          <Button type=\"link\" onClick={handleHistory}>\n            history\n          </Button>\n          ,\n          <Button type=\"link\" onClick={onWithDraw}>\n            withdraw\n          </Button>\n          ,\n        </>\n      }\n    >\n      <Form layout=\"vertical\">\n        <Form.Item label={`${account.network} address`}>\n          <Input value={key.address} />\n          <div style={{ margin: 20 }}>\n            <QRCode value={key.address} />\n          </div>\n        </Form.Item>\n        <Form.Item label=\"privateKey\">\n          <Input.Password visibilityToggle={true} value={key.privateKey} />\n        </Form.Item>\n      </Form>\n    </Card>,\n    <Card className=\"card\" title=\"Asset\" bordered={false}>\n      <Form layout=\"vertical\">\n        {bsvBalance && (\n          <Form.Item label=\"BSV balance\">\n            <Row justify=\"space-between\">\n              <Col span={16}>\n                <div>{formatValue(bsvBalance.balance, 8)}</div>\n              </Col>\n              <Col span={7}>\n                <Button type=\"link\" onClick={() => handleTransfer(\"\")}>\n                  Transfer BSV\n                </Button>\n              </Col>\n            </Row>\n          </Form.Item>\n        )}\n        {sensibleFtList.length > 0 && (\n          <Form.Item label=\"Sensible Fungible Token\">\n            <List\n              itemLayout=\"horizontal\"\n              dataSource={sensibleFtList}\n              renderItem={(item) => {\n                return (\n                  <List.Item\n                    key={item.genesis}\n                    actions={\n                      <>\n                        <Popover\n                          placement=\"topRight\"\n                          content={\n                            <>\n                              <div>codehash: {item.codehash}</div>,\n                              <div>genesis: {item.genesis}</div>,\n                            </>\n                          }\n                        >\n                          <a\n                            key=\"list-loadmore-more\"\n                            href={getSensibleFtHistoryUrl(\n                              account.network,\n                              key.address,\n                              item.genesis,\n                              item.codehash\n                            )}\n                            rel=\"noreferrer\"\n                            target=\"_blank\"\n                          >\n                            more info\n                          </a>\n                        </Popover>\n                      </>\n                    }\n                  >\n                    <List.Item.Meta\n                      title={item.tokenSymbol}\n                      description={item.tokenName}\n                    />\n                    <Row>\n                      <Col>\n                        <div\n                          style={{\n                            height: \"100%\",\n                            display: \"flex\",\n                            alignItems: \"center\",\n                          }}\n                        >\n                          Balance:{\" \"}\n                          {formatValue(item.balance, item.tokenDecimal)}\n                        </div>\n                      </Col>\n                      <Col>\n                        <Button\n                          type=\"link\"\n                          onClick={() => handleTransfer(item.genesis)}\n                        >\n                          Go Transfer\n                        </Button>\n                      </Col>\n                    </Row>\n                  </List.Item>\n                );\n              }}\n            ></List>\n          </Form.Item>\n        )}\n      </Form>\n    </Card>,\n  ];\n}\n\nfunction TransferPanel({\n  genesis = \"\",\n  initReceivers = [],\n  onCancel,\n  onTransferCallback,\n}) {\n  const [key] = useGlobalState(\"key\");\n  const [bsvBalance] = useGlobalState(\"bsvBalance\");\n  const [account] = useGlobalState(\"account\");\n  const [sensibleFtList] = useGlobalState(\"sensibleFtList\");\n  const [satotxConfigMap] = useGlobalState(\"satotxConfigMap\");\n  const [form] = Form.useForm();\n  const [loading, setLoading] = useState(false);\n  const canEdit = !(initReceivers.length > 0);\n\n  useOnceCall(() => {\n    const isBsv = genesis === \"\";\n    const token = sensibleFtList.find((item) => item.genesis === genesis);\n    const decimal = isBsv ? 8 : token.tokenDecimal;\n    console.log(\n      \"initReceivers\",\n      initReceivers,\n      initReceivers.map((item) => {\n        return {\n          address: item.address,\n          amount: item.amount / 10 ** decimal,\n        };\n      })\n    );\n    form.setFieldsValue({\n      receiverList: initReceivers.map((item) => {\n        return {\n          address: item.address,\n          amount: item.amount / 10 ** decimal,\n        };\n      }),\n    });\n  }, key && bsvBalance && initReceivers.length);\n\n  if (!key) {\n    return null;\n  }\n  if (!bsvBalance) {\n    return null;\n  }\n  if (genesis && !sensibleFtList.length) {\n    return null;\n  }\n\n  const isBsv = genesis === \"\";\n  const token = sensibleFtList.find((item) => item.genesis === genesis);\n\n  if (!isBsv && !token) {\n    return null;\n  }\n  const tokenSymbol = isBsv ? \"BSV\" : token.tokenSymbol;\n  const decimal = isBsv ? 8 : token.tokenDecimal;\n  const balance = isBsv ? bsvBalance.balance : token.balance;\n  const formatBalance = formatValue(balance, decimal);\n\n  const handleSubmit = async () => {\n    const { receiverList } = form.getFieldsValue();\n    const totalOutputValue =\n      receiverList.reduce((prev, cur) => prev + cur.amount, 0) * 10 ** decimal;\n    if (balance < totalOutputValue) {\n      const msg = \"Insufficient balance\";\n      onTransferCallback({\n        error: msg,\n      });\n      return message.error(msg);\n    }\n\n    // 不存在的话，使用默认的 api.satotx.com\n    // if (!isBsv && !satotxConfigMap.has(genesis)) {\n    //   const msg = \"Token rabin signer not set yet\";\n    //   onTransferCallback({\n    //     error: msg,\n    //   });\n    //   return message.error(msg);\n    // }\n\n    const formatReceiverList = receiverList.map((item) => {\n      return {\n        address: item.address,\n        amount: item.amount * 10 ** decimal,\n      };\n    });\n\n    const broadcastBsv = async () => {\n      setLoading(true);\n      let txid = \"\";\n      try {\n        const res = await await transferBsv(\n          account.network,\n          key.privateKey,\n          formatReceiverList\n        );\n        txid = res.txid;\n      } catch (err) {\n        const msg = \"broadcast error: \" + err.toString();\n        onTransferCallback({\n          error: msg,\n        });\n        console.log(\"broadcast bsv error \", err);\n        message.error(err.toString());\n      }\n      setLoading(false);\n      if (txid) {\n        onTransferCallback({\n          response: {\n            txid,\n          },\n        });\n        Modal.success({\n          title: \"Transaction broadcast success\",\n          content: (\n            <div>\n              txid:{\" \"}\n              <a\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                href={getWocTransactionUrl(account.network, txid)}\n              >\n                {txid}\n              </a>\n            </div>\n          ),\n        });\n      }\n    };\n\n    const broadcastSensibleFt = async () => {\n      setLoading(true);\n      let txid = \"\";\n      try {\n        const signers = satotxConfigMap.get(genesis) || [\n          defaultSatotx,\n          defaultSatotx,\n          defaultSatotx,\n        ];\n        const res = await transferSensibleFt(\n          account.network,\n          signers,\n          key.privateKey,\n          formatReceiverList,\n          token.codehash,\n          token.genesis\n        );\n        txid = res.txid;\n      } catch (err) {\n        console.log(\"broadcast sensible ft error \");\n        console.error(err)\n        message.error(err.toString());\n      }\n      setLoading(false);\n      if (txid) {\n        onTransferCallback({\n          response: {\n            txid,\n          },\n        });\n        Modal.success({\n          title: \"Transaction broadcast success\",\n          content: (\n            <div>\n              txid:{\" \"}\n              <a\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                href={getWocTransactionUrl(account.network, txid)}\n              >\n                {txid}\n              </a>\n            </div>\n          ),\n        });\n      }\n    };\n\n    Modal.confirm({\n      title: \"Confirm the transaction\",\n      onOk: () => {\n        isBsv ? broadcastBsv() : broadcastSensibleFt();\n      },\n    });\n  };\n  const handleBack = () => {\n    onCancel();\n  };\n\n  return (\n    <Card\n      className=\"card\"\n      title={\n        <div style={{ cursor: \"pointer\" }} onClick={handleBack}>\n          <LeftOutlined />\n          Transfer\n        </div>\n      }\n      loading={loading}\n      bordered={false}\n    >\n      <Form form={form} layout=\"vertical\" onFinish={handleSubmit}>\n        <div className=\"transfer-line\">\n          {isBsv ? `Coin: ${tokenSymbol}` : `Token: ${tokenSymbol}`}\n        </div>\n        {!isBsv && (\n          <div className=\"transfer-line\">Genesis: {token.genesis}</div>\n        )}\n        {!isBsv && (\n          <div className=\"transfer-line\">Codehash: {token.codehash}</div>\n        )}\n        <Row justify=\"space-between\" style={{ margin: \"10px 0\" }}>\n          <Col span={14}>\n            <div style={{ fontWeight: 700 }}>Input</div>\n          </Col>\n        </Row>\n        <div className=\"transfer-line\">{`Balance: ${formatBalance}`}</div>\n        <div className=\"transfer-line\">{`From Address: ${key.address}`}</div>\n        <Row justify=\"space-between\" style={{ margin: \"10px 0\" }}>\n          <Col span={14}>\n            <div style={{ fontWeight: 700 }}>Output</div>\n          </Col>\n        </Row>\n        <Form.List name=\"receiverList\">\n          {(fields, { add, remove }) => (\n            <>\n              {fields.map((key, name, fieldKey, ...restField) => {\n                return (\n                  <Space\n                    key={key.fieldKey}\n                    style={{ display: \"flex\", marginBottom: 8 }}\n                    align=\"baseline\"\n                  >\n                    <Form.Item\n                      {...restField}\n                      name={[name, \"address\"]}\n                      fieldKey={[fieldKey, \"address\"]}\n                      rules={[\n                        {\n                          required: true,\n                          message: \"Please input the address\",\n                        },\n                        {\n                          message: \"invalid address\",\n                          validator: (_, value) =>\n                            isValidAddress(account.network, value)\n                              ? Promise.resolve()\n                              : Promise.reject(),\n                        },\n                      ]}\n                    >\n                      <Input\n                        placeholder=\"Input the address\"\n                        disabled={!canEdit}\n                      />\n                    </Form.Item>\n                    <Form.Item\n                      {...restField}\n                      name={[name, \"amount\"]}\n                      fieldKey={[fieldKey, \"amount\"]}\n                      rules={[\n                        { required: true, message: \"Please input amount\" },\n                      ]}\n                    >\n                      <InputNumber\n                        placeholder=\"Amount\"\n                        min={0}\n                        disabled={!canEdit}\n                      />\n                    </Form.Item>\n                    <Button\n                      disabled={!canEdit}\n                      size=\"small\"\n                      onClick={() => remove(name)}\n                      shape=\"circle\"\n                      icon={<MinusOutlined />}\n                    />\n                  </Space>\n                );\n              })}\n\n              <Form.Item>\n                <Button\n                  type=\"dashed\"\n                  onClick={() => add()}\n                  icon={<PlusOutlined />}\n                  disabled={!canEdit}\n                >\n                  Add Output\n                </Button>\n              </Form.Item>\n            </>\n          )}\n        </Form.List>\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\" block>\n            Transfer\n          </Button>\n        </Form.Item>\n      </Form>\n    </Card>\n  );\n}\n\nfunction App() {\n  useEffect(() => {\n    actions.recoverAccountFromStorage();\n  }, []);\n\n  const [trasfering, setTransfering] = useState(false);\n  const [trasferSensibleFtGenesis, setTrasferSensibleFtGenesis] = useState(\"\");\n  const [account] = useGlobalState(\"account\");\n  const [key] = useGlobalState(\"key\");\n  const [bsvBalance] = useGlobalState(\"bsvBalance\");\n  const [sensibleFtList] = useGlobalState(\"sensibleFtList\");\n  const [initReceivers, setInitReceivers] = useState([]);\n\n  const handleTransfer = (genesis) => {\n    setTransfering(true);\n    genesis && setTrasferSensibleFtGenesis(genesis);\n  };\n  const handleCancelTransfer = () => {\n    setTransfering(false);\n    setTrasferSensibleFtGenesis(\"\");\n  };\n\n  const getHashData = () => {\n    if (!window.opener) {\n      return null;\n    }\n    const hash = window.location.hash.substr(1);\n    try {\n      const data = JSON.parse(decodeURIComponent(hash));\n      if (data.type === \"popup\") {\n        if (typeof data.data === \"object\") {\n          return data;\n        }\n      }\n    } catch (err) {}\n    return null;\n  };\n  const handlePopResponseCallback = (resObj) => {\n    const data = getHashData();\n    if (!data) {\n      return;\n    }\n    const postMsg = createPostMsg(window.opener, \"*\");\n    postMsg.emit(data.id, {\n      type: \"response\",\n      data: {\n        ...data.data.data,\n        ...resObj,\n      },\n    });\n  };\n\n  // todo 数值计算 使用 bignumber\n  // todo 此处接收 postMessage 消息，处理登录,transfer\n  const requestAccountCondition = key?.address && account?.network;\n  const transferBsvCondition =\n    requestAccountCondition && bsvBalance && bsvBalance.balance >= 0;\n  useOnceCall(() => {\n    const data = getHashData();\n    if (!data || data.data.type !== \"request\") {\n      return;\n    }\n\n    const { method, params } = data.data.data;\n    if (method !== \"requestAccount\") {\n      return;\n    }\n    Modal.confirm({\n      title: \"Connect\",\n      content: (\n        <div>\n          Allow <b>{params.name}</b> to connect your web wallet\n        </div>\n      ),\n      onOk: () => {\n        handlePopResponseCallback({ response: true });\n      },\n      onCancel: () => {\n        handlePopResponseCallback({ error: \"user reject\" });\n      },\n    });\n  }, !!requestAccountCondition);\n  useOnceCall(() => {\n    const data = getHashData();\n    if (!data || data.data.type !== \"request\") {\n      return;\n    }\n\n    const { method, params } = data.data.data;\n    if (method !== \"transferBsv\") {\n      return;\n    }\n    // balance check\n    const outputTotal = params.receivers.reduce(\n      (prev, cur) => prev + cur.amount,\n      0\n    );\n    if (outputTotal >= bsvBalance.balance) {\n      handlePopResponseCallback({ error: \"insufficient balance\" });\n      return;\n    }\n    setTransfering(true);\n    setInitReceivers(params.receivers);\n  }, !!transferBsvCondition);\n  useOnceCall(() => {\n    const data = getHashData();\n    if (!data || data.data.type !== \"request\") {\n      return;\n    }\n\n    const { method, params } = data.data.data;\n    if (method !== \"transferSensibleFt\") {\n      return;\n    }\n    // sensibleft balance check\n    const outputTotal = params.receivers.reduce(\n      (prev, cur) => prev + cur.amount,\n      0\n    );\n    const ft = sensibleFtList.find((item) => item.genesis === params.genesis);\n    if (!ft) {\n      handlePopResponseCallback({ error: \"insufficient balance\" });\n      return;\n    }\n    if (outputTotal >= ft.balance) {\n      handlePopResponseCallback({ error: \"insufficient balance\" });\n      return;\n    }\n    setTrasferSensibleFtGenesis(params.genesis);\n    setInitReceivers(params.receivers);\n  }, !!transferBsvCondition);\n  useEffect(() => {\n    window.onbeforeunload = function () {\n      handlePopResponseCallback({ error: \"use closed\" });\n    };\n  });\n\n  return (\n    <div className=\"App\" style={{ overflow: \"hidden\" }}>\n      <Header accountName=\"harry\" />\n      <LoginPanel />\n      {!trasfering && <AccountInfoPanel onTransfer={handleTransfer} />}\n      {trasfering && (\n        <TransferPanel\n          genesis={trasferSensibleFtGenesis}\n          onCancel={handleCancelTransfer}\n          onTransferCallback={handlePopResponseCallback}\n          initReceivers={initReceivers}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport * as actions from \"./state/action\";\n\nimport { Buffer } from \"buffer/index\";\n\nconst isIframe = window === window.top;\n\nif (isIframe) {\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n  );\n} else {\n  actions.runIframeTask();\n}\n\n// alert(window === window.top);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","\nexport interface UTXO {\n  txHash: number,\n  outputIndex: string;\n  satoshis: number;\n  script: string;\n}\n\nexport interface Output {\n  satoshis: number,\n  script: string;\n}\n\n\nexport interface Input {\n  utxo: UTXO,\n  sequence: number,\n  script: string;\n}\n\nexport interface Tx {\n  nLockTime?: number,\n  inputs: Input[],\n  outputs: Output[],\n}\n\nexport interface Account {\n  name: string,\n  paymail: string,\n  address: string,\n  permissions?: string[]\n}\n\n\nexport enum NetWork {\n  Testnet = 'testnet',\n  Mainnet = 'mainnet',\n  STN = 'STN'\n}\n\n\nexport enum SignType {\n  ALL = 0x00000001 | 0x00000040,\n  SINGLE = 0x00000003 | 0x00000040,\n  NONE = 0x00000002 | 0x00000040,\n  ANYONECANPAY_ALL = 0x00000001 | 0x00000040 | 0x00000080,\n  ANYONECANPAY_SINGLE = 0x00000003 | 0x00000040 | 0x00000080,\n  ANYONECANPAY_NONE = 0x00000002 | 0x00000040 | 0x00000080\n}\n\n\nexport abstract class wallet {\n\n  network: NetWork;\n\n  constructor(network: NetWork) {\n    this.network = network;\n  }\n\n  //Dapp use this api to connect to the wallet.\n  abstract requestAccount(name: string, permissions: string[]): Promise<Account>;\n\n  //get wallet balance\n  abstract getbalance(): Promise<number>;\n\n  //sign raw transaction, returns unlockscript of the p2pkh input if success\n  abstract signRawTransaction(tx: Tx, inputIndex: number, sigHashType: SignType\n  ): Promise<string>;\n\n  //get signature for special input\n  abstract getSignature(tx: Tx, inputIndex: number, sigHashType: SignType\n  ): Promise<string>;\n\n  //send raw transaction, returns transaction hash if success\n  abstract sendRawTransaction(rawTx: string): Promise<string>;\n\n  //returns array of unspent transaction outputs, which total amount is more than the minAmount argument.\n  abstract listUnspent(minAmount: number, options?: {\n    purpose?: string\n  }): Promise<UTXO[]>;\n\n  //returns a new Bitcoin address, for receiving change.\n  abstract getRawChangeAddress(options?: {\n    purpose?: string\n  }): Promise<string>;\n\n  //returns a public key\n  abstract getPublicKey(options?: {\n    purpose?: string\n  }): Promise<string>;\n\n}","\nimport { bsv, SigHashPreimage, getPreimage as getPreimage_ } from 'scryptlib';\nimport { SignType, Tx, UTXO } from './wallet';\n\n\nexport function signInput(privateKey: any, tx: any, inputIndex: number, sigHashType: number, utxo: UTXO): string {\n\n  tx.inputs[inputIndex].output = new bsv.Transaction.Output({\n    script: utxo.script,\n    satoshis: utxo.satoshis\n  });\n\n  const sig = new bsv.Transaction.Signature({\n    publicKey: privateKey.publicKey,\n    prevTxId: utxo.txHash,\n    outputIndex: utxo.outputIndex,\n    inputIndex,\n    signature: bsv.Transaction.Sighash.sign(tx, privateKey, sigHashType,\n      inputIndex,\n      tx.inputs[inputIndex].output.script,\n      tx.inputs[inputIndex].output.satoshisBN),\n    sigtype: sigHashType,\n  });\n\n  return bsv.Script.buildPublicKeyHashIn(\n    sig.publicKey,\n    sig.signature.toDER(),\n    sig.sigtype,\n  ).toHex();\n}\n\n\n\n\nexport function toBsvTx(tx: Tx) {\n  const tx_ = new bsv.Transaction();\n\n  tx.inputs.forEach(input => {\n    tx_.addInput(new bsv.Transaction.Input({\n      prevTxId: input.utxo.txHash,\n      outputIndex: input.utxo.outputIndex,\n      sequenceNumber: input.sequence,\n      script: input.script ? bsv.Script.fromHex(input.script) : new bsv.Script(),\n    }), bsv.Script.fromHex(input.utxo.script), input.utxo.satoshis);\n  });\n\n\n  tx.outputs.forEach(output => {\n    tx_.addOutput(new bsv.Transaction.Output({\n      script: bsv.Script.fromHex(output.script),\n      satoshis: output.satoshis,\n    }));\n  });\n\n  tx_.nLockTime = tx.nLockTime || 0;\n  return tx_;\n}\n\nexport function toRawTx(tx: Tx) {\n  return toBsvTx(tx).toString();\n}\n\n\n\nexport function getPreimage(tx: Tx, inputIndex = 0, sigHashType: SignType = SignType.ALL): SigHashPreimage {\n  const bsvTx = toBsvTx(tx);\n  return getPreimage_(bsvTx, bsv.Script.fromHex(tx.inputs[inputIndex].utxo.script).toASM(), tx.inputs[inputIndex].utxo.satoshis, inputIndex, sigHashType);\n}\n","import { Account, NetWork, UTXO, wallet, Tx, SignType } from './wallet';\nimport { toHex, bsv, signTx } from 'scryptlib';\nimport { signInput, toBsvTx } from './wutils';\nimport axios from 'axios';\n\n\nexport class LocalWallet extends wallet {\n  API_PREFIX: string;\n  privKey: any;\n  constructor(network: NetWork, key: string) {\n    super(network);\n    this.API_PREFIX = `https://api.whatsonchain.com/v1/bsv/${network === NetWork.Testnet ? 'test' : 'main'}`;\n    this.privKey = key ? new bsv.PrivateKey.fromWIF(key) : new bsv.PrivateKey.fromRandom(network);\n  }\n\n\n  requestAccount(name: string, permissions: string[]): Promise<Account> {\n    throw new Error('Method not implemented.');\n  }\n\n  async getbalance(): Promise<number> {\n\n    const {\n      data: balance\n    } = await axios.get(`${this.API_PREFIX}/address/${this.privKey.toAddress()}/balance`, {\n      timeout: 5000\n    });\n\n    return balance.confirmed + balance.unconfirmed;\n  }\n\n  async signRawTransaction(tx: Tx,\n    inputIndex: number,\n    sigHashType: SignType\n  ): Promise<string> {\n\n\n    const tx_ = toBsvTx(tx);\n\n    const utxo = tx.inputs[inputIndex].utxo;\n\n    return signInput(this.privKey, tx_, inputIndex, sigHashType, utxo);\n  }\n\n\n  async getSignature(tx: Tx,\n    inputIndex: number,\n    sigHashType: SignType\n  ): Promise<string> {\n\n\n    const tx_ = toBsvTx(tx);\n\n    return signTx(tx_, this.privKey, tx_.inputs[inputIndex].output.script.toASM(), tx_.inputs[inputIndex].output.satoshisBN, inputIndex, sigHashType);\n\n  }\n\n  async sendRawTransaction(rawTx: string): Promise<string> {\n\n    // 1 second per KB\n\n    const size = Math.max(1, rawTx.length / 2 / 1024); //KB\n    const time = Math.max(10000, 1000 * size);\n    const {\n      data: txid\n    } = await axios.post(`${this.API_PREFIX}/tx/raw`, {\n      txhex: rawTx\n    }, {\n      timeout: time\n    });\n    return txid;\n  }\n\n  async listUnspent(minAmount: number, options?: { purpose?: string; }): Promise<UTXO[]> {\n    return axios.get(`${this.API_PREFIX}/address/${this.privKey.toAddress()}/unspent`, {\n      timeout: 10000\n    }).then(res => {\n      return res.data.filter((utxo: any) => utxo.value >= minAmount).map((utxo: any) => {\n        return {\n          txHash: utxo.tx_hash,\n          outputIndex: utxo.tx_pos,\n          satoshis: utxo.value,\n          script: bsv.Script.buildPublicKeyHashOut(this.privKey.toAddress()).toHex(),\n        } as UTXO;\n      });\n    });\n  }\n\n\n  getRawChangeAddress(options?: { purpose?: string; }): Promise<string> {\n\n    return new Promise(resolve => resolve(this.privKey.toAddress() + ''));\n  }\n\n\n  getPublicKey(options?: { purpose?: string; }): Promise<string> {\n\n    return new Promise(resolve => resolve(toHex(this.privKey.publicKey)));\n  }\n\n}","import { buildContractClass, buildTypeClasses, ScryptType, bsv } from 'scryptlib';\nimport { } from 'scryptlib';\nimport { UTXO, wallet, Tx,SignType, NetWork } from './wallet';\nimport axios from 'axios';\nimport { AbstractContract } from 'scryptlib/dist/contract';\nimport { toRawTx } from './wutils';\nimport { LocalWallet } from './localwallet';\nconst WEB3_VERSION = '0.0.1';\n\nconst FEE = 2000;\n\nexport class web3 {\n\n\n  static wallet: wallet;\n\n\n  static setWallet(wallet: wallet) {\n    web3.wallet = wallet;\n  }\n\n\n  static version() {\n    return WEB3_VERSION;\n  }\n\n\n  static loadContract(url: string): Promise<{\n    contractClass: typeof AbstractContract,\n    types: Record<string, typeof ScryptType>\n  }> {\n\n    return axios.get(url, {\n      timeout: 10000\n    }).then(res => {\n\n      return {\n        contractClass: buildContractClass(res.data),\n        types: buildTypeClasses(res.data)\n      };\n    });\n  }\n\n\n\n  static async buildDeployTx(contract: AbstractContract, amountInContract: number, alicePrivateKey: string, bobPrivateKey: string): Promise<Tx> {\n\n    let aliceWallet = new LocalWallet(NetWork.Mainnet, alicePrivateKey);\n    let bobWallet = new LocalWallet(NetWork.Mainnet, bobPrivateKey);\n\n    const aliceChangeAddress = await aliceWallet.getRawChangeAddress();\n    const bobChangeAddress = await bobWallet.getRawChangeAddress();\n\n    const tx: Tx = {\n      inputs: [],\n      outputs: []\n    };\n\n    tx.outputs.push({\n      script: contract.lockingScript.toHex(),\n      satoshis: amountInContract * 2\n    });\n\n    const minAmount = amountInContract + FEE;\n\n    return aliceWallet.listUnspent(minAmount, {\n      purpose: 'change'\n    }).then(async (utxos: UTXO[]) => {\n\n      if (utxos.length === 0) {\n        throw new Error('no utxos');\n      }\n\n      //add input which using utxo from alice\n      tx.inputs.push(\n        {\n          utxo: utxos[0],\n          script: '',\n          sequence: 0\n        }\n      );\n\n      const changeAmount = utxos[0].satoshis - amountInContract - FEE;\n\n      if (changeAmount <= 0) {\n        throw new Error('fund is not enough');\n      }\n\n      //add alice change output\n\n      tx.outputs.push(\n        {\n          script: bsv.Script.buildPublicKeyHashOut(aliceChangeAddress).toHex(),\n          satoshis: changeAmount\n        }\n      );\n\n      return tx;\n    }).then(tx => {\n      return bobWallet.listUnspent(minAmount, {\n        purpose: 'change'\n      }).then(async (utxos: UTXO[]) => {\n\n        if (utxos.length === 0) {\n          throw new Error('no utxos');\n        }\n\n        //add input which using utxo from bob\n        tx.inputs.push(\n          {\n            utxo: utxos[0],\n            script: '',\n            sequence: 0\n          }\n        );\n\n        const changeAmount = utxos[0].satoshis - amountInContract - FEE;\n\n        if (changeAmount <= 0) {\n          throw new Error('fund is not enough');\n        }\n\n        //add bob change output\n        tx.outputs.push(\n          {\n            script: bsv.Script.buildPublicKeyHashOut(bobChangeAddress).toHex(),\n            satoshis: changeAmount\n          }\n        );\n\n        return tx;\n\n      })\n    }).then(tx => {\n      //alice sign\n      return aliceWallet.signRawTransaction(tx, 0, SignType.ALL).then(unlockscript => {\n        tx.inputs[0].script = unlockscript;\n        return tx;\n      })\n    }).then(tx => {\n      //bob sign\n      return bobWallet.signRawTransaction(tx, 1, SignType.ALL).then(unlockscript => {\n        tx.inputs[1].script = unlockscript;\n        return tx;\n      })\n    })\n  }\n\n\n  static async sendRawTx(rawTx: string): Promise<string> {\n    return web3.wallet.sendRawTransaction(rawTx);\n  }\n\n  static async sendTx(tx: Tx): Promise<string> {\n    return web3.wallet.sendRawTransaction(toRawTx(tx));\n  }\n\n\n  static async deploy(contract: AbstractContract, amountInContract: number, alicePrivateKey: string, bobPrivateKey: string): Promise<[Tx, string]> {\n    return web3.buildDeployTx(contract, amountInContract, alicePrivateKey, bobPrivateKey).then(async tx => {\n      return web3.sendTx(tx).then(txid => {\n        return [tx, txid];\n      })\n    });\n  }\n}"],"sourceRoot":""}